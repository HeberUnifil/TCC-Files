@inproceedings{10.1145/3368756.3369098,
author = {Ikram, Ben Abdel Ouahab and Mohammed, Bouhorma and Abdelhakim, Boudhir Anouar and Lotfi, El Aachak and Zafar, Bassam},
title = {Machine Learning Application for Malwares Classification Using Visualization Technique},
year = {2019},
isbn = {9781450362894},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368756.3369098},
doi = {10.1145/3368756.3369098},
abstract = {Nowadays attackers work hard to develop efficient cyberthreats and exploit new techniques. So defenders need to use advanced methodologies to combat the latest threats and safely remove them from computers, mobiles and connected devices. Without the intelligent techniques, these devices would be at increased risk of damage from malicious programs. Recently a novel approach of processing malwares was appeared; it passes from malware binaries into malware images. Researchers found similarities in malwares images by extracting specific features. This paper presents malwares classifier using KNN and malware visualization technique. We used a database of 9339 samples of malwares from 25 families. We calculated the GIST descriptor for grayscale malware images. Then a KNN model was trained and evaluated many times to reach a score of 97%, which is very close to results found on literature.},
booktitle = {Proceedings of the 4th International Conference on Smart City Applications},
articleno = {110},
numpages = {6},
keywords = {malwares classification, cybersecurity, machine learning and KNN, malware visualization technique},
location = {Casablanca, Morocco},
series = {SCA '19}
}


@inproceedings{10.1145/2967360.2967367,
author = {Song, Linhai and Huang, Heqing and Zhou, Wu and Wu, Wenfei and Zhang, Yiying},
title = {Learning from Big Malwares},
year = {2016},
isbn = {9781450342650},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2967360.2967367},
doi = {10.1145/2967360.2967367},
abstract = {This paper calls for the attention to investigate real-world malwares in large scales by examining the largest real malware repository, VirusTotal. As a first step, we analyzed two fundamental characteristics of Windows executable malwares from VirusTotal. We designed offline and online tools for this analysis. Our results show that malwares appear in bursts and that distributions of malwares are highly skewed.},
booktitle = {Proceedings of the 7th ACM SIGOPS Asia-Pacific Workshop on Systems},
articleno = {12},
numpages = {8},
location = {Hong Kong, Hong Kong},
series = {APSys '16}
}


@inproceedings{10.1145/2659651.2659738,
author = {Gandotra, Ekta and Bansal, Divya and Sofat, Sanjeev},
title = {Integrated Framework for Classification of Malwares},
year = {2014},
isbn = {9781450330336},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2659651.2659738},
doi = {10.1145/2659651.2659738},
abstract = {Malware is one of the most terrible and major security threats facing the Internet today. It is evolving, becoming more sophisticated and using new ways to target computers and mobile devices. The traditional defences like antivirus softwares typically rely on signature based methods and are unable to detect previously unseen malwares. Machine learning approaches have been adopted to classify malwares based on the features extracted using static or dynamic analysis. Both type of malware analysis have their pros and cons. In this paper, we propose a classification framework which uses integration of both static and dynamic features for distinguishing malwares from clean files. A real world corpus of recent malwares is used to validate the proposed approach. The experimental results, based on a dataset of 998 malwares and 428 cleanware files provide an accuracy of 99.58% indicating that the hybrid approach enhances the accuracy rate of malware detection and classification over the results obtained when these features are considered separately.},
booktitle = {Proceedings of the 7th International Conference on Security of Information and Networks},
pages = {417–422},
numpages = {6},
keywords = {Machine Learning, Static Analysis, Classification, Dynamic Analysis, Malware},
location = {Glasgow, Scotland, UK},
series = {SIN '14}
}


@inproceedings{10.1145/1774088.1774505,
author = {Lee, Jusuk and Jeong, Kyoochang and Lee, Heejo},
title = {Detecting Metamorphic Malwares Using Code Graphs},
year = {2010},
isbn = {9781605586397},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1774088.1774505},
doi = {10.1145/1774088.1774505},
abstract = {Malware writers and detectors have been running an endless battle. Self-defense is the weapon most malware writers prepare against malware detectors. Malware writers have tried to evade the improved detection techniques of anti-virus(AV) products. Packing and code obfuscation are two popular evasion techniques. When these techniques are applied to malwares, they are able to change their instruction sequence while maintaining their intended function. We propose a detection mechanism defeating these self-defense techniques to improve malware detection. Since an obfuscated malware is able to change the syntax of its code while preserving its semantics, the proposed mechanism uses the semantic invariant. We convert the API call sequence of the malware into a graph, commonly known as a call graph, to extract the semantic of the malware. The call graph can be reduced to a code graph used for semantic signatures of the proposed mechanism. We show that the code graph can represent the characteristics of a program exactly and uniquely. Next, we evaluate the proposed mechanism by experiment. The mechanism has an 91% detection ratio of real-world malwares and detects 300 metamorphic malwares that can evade AV scanners. In this paper, we show how to analyze malwares by extracting program semantics using static analysis. It is shown that the proposed mechanism provides a high possibility of detecting malwares even when they attempt self-protection.},
booktitle = {Proceedings of the 2010 ACM Symposium on Applied Computing},
pages = {1970–1977},
numpages = {8},
keywords = {static analysis, code graph, code obfuscation, metamorphic malware},
location = {Sierre, Switzerland},
series = {SAC '10}
}


@inproceedings{10.1145/3368756.3369091,
author = {Ilham, Soussi and Abderrahim, Ghadi and Abdelhakim, Boudhir Anouar},
title = {Deep Learning for Detecting Android Malwares},
year = {2019},
isbn = {9781450362894},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368756.3369091},
doi = {10.1145/3368756.3369091},
abstract = {The revolution and development of malwares over time necessitate an intensive researches on advanced techniques to secure user's personal and critical information, the most challenging task is to build a strong and robust classifier allows to detect different types of malwares and being able to defeat zero-day malware attacks. Machine learning algorithms as SVM (support vector machine), Random Forest and Na\"{\i}ve Bayes are well-known choices for building the malware classifier, even though the deep learning which is a subfield of machine learning, has a portion in classifying android malwares with high precision. In this paper we present a modest study on difference between using both techniques and proposition of an approach based on deep learning technique applied on Apk of android applications belong to a heterogeneous data combined of benign and malware applications of different types.},
booktitle = {Proceedings of the 4th International Conference on Smart City Applications},
articleno = {104},
numpages = {4},
keywords = {convolutional neural network, API calls, static analysis, Android malware, classification, deep learning, machine learning},
location = {Casablanca, Morocco},
series = {SCA '19}
}


@inproceedings{10.1145/3386723.3387839,
author = {Ikram, Ben Abdel Ouahab and Lotfi, El Aachak and Abdelhakim, Boudhir Anouar and Mohammed, Bouhorma},
title = {Speedy and Efficient Malwares Images Classifier Using Reduced GIST Features for a New Defense Guide},
year = {2020},
isbn = {9781450376341},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3386723.3387839},
doi = {10.1145/3386723.3387839},
abstract = {Malwares attacks are becoming increasingly destructive. Hackers target all types of devices from big to the most little ones. Researcher's communities in cybersecurity field are working hard to defend malwares attacks as well as any other malicious activity. In fact, the primary goal is to defend cyberattacks as fast as possible to avoid catastrophic damages. In this paper, we proposed new cybersecurity architecture specialized in malwares attacks defense. This proposal puts together four layers based on malwares behaviors. In addition, we perform malware classifier using malware visualization technique, GIST descriptor features and K-Nearest Neighbor algorithm. The classifier is able to put each input malware image into its corresponding family. Families distribution is been divided by malwares behaviors. For the purpose of attaining speedy malwares classifier, we use Univariate Feature Selection technique to reduce GIST feature. So we succeeded in getting from 320 to only 50 features in less timing with very close accuracy of 97,67%.},
booktitle = {Proceedings of the 3rd International Conference on Networking, Information Systems &amp; Security},
articleno = {20},
numpages = {6},
keywords = {malware visualization and Features selection, Machine learning, Cybersecurity, malware classification, k-nearest neighbor},
location = {Marrakech, Morocco},
series = {NISS2020}
}


@inproceedings{10.1145/2508859.2512520,
author = {Li, Dan and Liu, Chaoge and Cui, Xu and Cui, Xiang},
title = {POSTER: Sniffing and Propagating Malwares through WPAD Deception in LANs},
year = {2013},
isbn = {9781450324779},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2508859.2512520},
doi = {10.1145/2508859.2512520},
abstract = {The Web Proxy Auto-Discovery (WPAD) protocol is always used to locate a URL of a configuration file through DHCP, DNS or some other discovery methods. WPAD is a very convenience way for the management of network administrator. However, in the meantime, it may lead to a potential compromise to our LANs. In this poster, we propose a novel attack method based on WPAD protocol which can be used by attacker to intercept traffic, sniff and propagate malwares in LAN.},
booktitle = {Proceedings of the 2013 ACM SIGSAC Conference on Computer &amp; Communications Security},
pages = {1437–1440},
numpages = {4},
keywords = {malware propagation, sniffer, wpad},
location = {Berlin, Germany},
series = {CCS '13}
}


@inproceedings{10.1145/3057109.3057112,
author = {Luo, Xi and Wang, Liming and Xu, Zhen and Yang, Jing and Sun, Mo and Wang, Jing},
title = {DGASensor: Fast Detection for DGA-Based Malwares},
year = {2017},
isbn = {9781450348614},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3057109.3057112},
doi = {10.1145/3057109.3057112},
abstract = {DNS protocol has been used by many malwares for command-and-control (C&amp;C). To improve the resiliency of C&amp;C communication, Domain Generation Algorithm (DGA) has been utilized by recent malwares such as Locky, Conficker and Zeus. Many detection systems have been introduced for DGA-based botnets detection. However, such botnets detection approaches suffer from several limitations, for instance, requiring a group of DGA domains, period behaviors, the presence of multiple bots, and so forth. It is very hard for them to detect an individually running DGA-based malware which leave only a few traces. In this paper, we develop DGASensor to detect DGA-based malwares immediately by identifying a single DGA domain using lexical evidence. First, DGASensor automatically analyzes the lexical patterns of the most popular domains listed in Alexa top 100,000, and then extracts two templates, namely distribution template and structure template. Second, the above two templates, pronounceable attributes, and some frequently used properties like entropy and length, are used to extract features from a single domain. Third, we train our classifier using a non-DGA dataset consisting of domains obtained from Alexa rank and a DGA dataset generated by known DGAs. At last, we provide a short word filter to decrease the false positive rate. We implement a prototype system and evaluate it using the above training dataset with 10-fold cross validation. Moreover, a set of real world DNS traffic collected from a recursive DNS server is used to measure real world performance of our system. The results show that DGASensor detects DGA domains with accuracy 93% in our training dataset and is able to identify a variety of malwares in the real world dataset with an extremely high processing capability.},
booktitle = {Proceedings of the 5th International Conference on Communications and Broadband Networking},
pages = {47–53},
numpages = {7},
keywords = {DGA-based malwares, DNS, command-and-control, individually running, lexical evidence, single DGA domain},
location = {Bali, Indonesia},
series = {ICCBN '17}
}


@inproceedings{10.1145/3154273.3154326,
author = {Sethi, Kamalakanta and Chaudhary, Shankar Kumar and Tripathy, Bata Krishan and Bera, Padmalochan},
title = {A Novel Malware Analysis Framework for Malware Detection and Classification Using Machine Learning Approach},
year = {2018},
isbn = {9781450363723},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3154273.3154326},
doi = {10.1145/3154273.3154326},
abstract = {Nowadays, the digitization of the world is under a serious threat due to the emergence of various new and complex malware every day. Due to this, the traditional signature-based methods for detection of malware effectively become an obsolete method. The efficiency of the machine learning techniques in context to the detection of malwares has been proved by state-of-the-art research works. In this paper, we have proposed a framework to detect and classify different files (e.g., exe, pdf, php, etc.) as benign and malicious using two level classifier namely, Macro (for detection of malware) and Micro (for classification of malware files as a Trojan, Spyware, Ad-ware, etc.). Our solution uses Cuckoo Sandbox for generating static and dynamic analysis report by executing the sample files in the virtual environment. In addition, a novel feature extraction module has been developed which functions based on static, behavioral and network analysis using the reports generated by the Cuckoo Sandbox. Weka Framework is used to develop machine learning models by using training datasets. The experimental results using the proposed framework shows high detection rate and high classification rate using different machine learning algorithms},
booktitle = {Proceedings of the 19th International Conference on Distributed Computing and Networking},
articleno = {49},
numpages = {4},
keywords = {SMO, Malware Detection, Malware Classification, Cuckoo Sandbox, Static and Dynamic Analysis},
location = {Varanasi, India},
series = {ICDCN '18}
}


@inproceedings{10.1145/3338840.3355693,
author = {Lee, Yena and Kim, Yongmin and Lee, Seungyeon and Heo, Junyoung and Hong, Jiman},
title = {Machine Learning Based Android Malware Classification},
year = {2019},
isbn = {9781450368438},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3338840.3355693},
doi = {10.1145/3338840.3355693},
abstract = {As growing Android smart-phones, malware threatens smart-phones is also increasing. There are many types of Android malwares. To detect these Android malwares effectively, first, we need to classify Android malwares. In this paper, we build a database storing Android malwares and their types and characteristics. With the database, we propose a machine learning model to classify the malwares. To evaluate the model, we conducted k-fold cross validation. Through the evaluation, our model showed over 85% accuracy in the malware classification.},
booktitle = {Proceedings of the Conference on Research in Adaptive and Convergent Systems},
pages = {300–302},
numpages = {3},
keywords = {malware database, malware classification, machine learning, Android mawlare},
location = {Chongqing, China},
series = {RACS '19}
}


@inproceedings{10.1145/3206129.3239430,
author = {Lee, Yoon-seon and Lee, Jae-ung and Soh, Woo-young},
title = {Trend of Malware Detection Using Deep Learning},
year = {2018},
isbn = {9781450365253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3206129.3239430},
doi = {10.1145/3206129.3239430},
abstract = {According to recent security trends, there are more variations of existing malware than new type malware. These malwares are causing a lot of damage, such as encrypting users ' data to leak personal information, delete data, and make financial demands. Although many studies are being conducted to analyze malwares in order to respond to the rapidly increasing malware with such malicious purpose, current malware analysis methods are for obfuscation, virtual environment bypass, etc. To overcome these difficulties, Deep Learning method that analyzes and utilizes harmful codes is receiving spotlight recently. Therefore, this thesis introduces trends on how to analyze malware based on Deep Learning.},
booktitle = {Proceedings of the 2nd International Conference on Education and Multimedia Technology},
pages = {102–106},
numpages = {5},
keywords = {Deep Learning, Malware Detection, Malware},
location = {Okinawa, Japan},
series = {ICEMT 2018}
}


@inproceedings{10.1145/2905055.2905361,
author = {Kunwar, Rakesh Singh and Sharma, Priyanka},
title = {Malware Analysis: Tools and Techniques},
year = {2016},
isbn = {9781450339629},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2905055.2905361},
doi = {10.1145/2905055.2905361},
abstract = {Malicious code is a serious issue which regularly threatens the security of computer systems and act as a challenging task for cyber security&amp; Information security personals. Malicious code is named differently according to their specification such as virus, worm, Trojan, Rootkit, spam etc. Risk factor due to malwares increases exponentially with the advancement in technology. Malware analysis is divided into code (static) analysis, behavioral (dynamic) analysis. It depends upon the investigator to use the different tools and techniques for analysis. Static analysis is first line of defense against malware which is composed of malware detector and scanners. With the advancement in technology, Malware developer uses different kind of techniques to maintain its source code hide from these detectors or scanner to find out hash value, finding strings, pattern matching etc. to identify the malware. Whereas, malware analyst decompress the packed file into unpacked file &amp; investigate obfuscated malwares. In this paper, we try to investigate the different tool and techniques used in malware over practical working malwares.},
booktitle = {Proceedings of the Second International Conference on Information and Communication Technology for Competitive Strategies},
articleno = {144},
numpages = {4},
keywords = {Dynamic Malware analysis, Threats, Static Malware analysis, Security, Sandbox},
location = {Udaipur, India},
series = {ICTCS '16}
}


@inproceedings{10.1145/2490428.2490454,
author = {Patanaik, Chinmaya Kumar and Barbhuiya, Ferdous A. and Nandi, Sukumar},
title = {Obfuscated Malware Detection Using API Call Dependency},
year = {2012},
isbn = {9781450318228},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2490428.2490454},
doi = {10.1145/2490428.2490454},
abstract = {Malwares pose a grave threat to security of a network and host systems. Many events such as Distributed Denial-of-Service attacks, spam emails etc., often have malwares as their root cause. So a great deal of research is being invested in detection and removal of malwares. Thus many malware detection systems or antivirus softwares have come up. But the drawback of these antivirus softwares is they rely upon signature matching approach for malware detection which can be easily defeated using simple code obfuscation techniques. This has given rise to a new generation of metamorphic and polymorphic malwares. In this paper we proposed the approach of monitoring interdependent system calls to detect obfuscated malicious programs. We took some sample malwares and some common obfuscation techniques. We tested these obfuscated malwares against open source antivirus ClamAV and our detection model. The results obtained have been elaborated further in the paper. Again how our algorithm is sound against many drawbacks of the API call monitoring approach such as API call reordering, garbage API call insertion etc., are also described.},
booktitle = {Proceedings of the First International Conference on Security of Internet of Things},
pages = {185–193},
numpages = {9},
keywords = {malware, obfuscation, API calls},
location = {Kollam, India},
series = {SecurIT '12}
}


@inproceedings{10.1145/2781562.2781567,
author = {Satrya, Gandeva B. and Cahyani, Niken D.W. and Andreta, Ritchie F.},
title = {The Detection of 8 Type Malware Botnet Using Hybrid Malware Analysis in Executable File Windows Operating Systems},
year = {2015},
isbn = {9781450334617},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2781562.2781567},
doi = {10.1145/2781562.2781567},
abstract = {Nowadays a lot of botnet are being used for the purpose of cybercrime such as distributed denial of services (DDos) or information stealing. Botnet is a collection of computers connected through Internet that has been taken over by an attacker using malwares. These infected computer are known as bot or zombie. These bot are controllable for the attacker through an infrastructure called Command and Control (C&amp;C) server. In general, the spread of botnets Windows operating system as its main target in the form of executable file (.exe).Right now Windows have a massive number of application in the form of executable file and almost all of it doing connection to the Internet. So it make it very difficult to distinguish an executable file as a malware botnet or not. Therefore, to identify and detecting a malware botnet required malware analysis on Windows executable file. Many ways can be done in analyzing a malware. However, generally speaking there are two techniques in malware analysis. That is static analysis and dynamic analysis. By combining both the results of static analysis, dynamic analysis can produce data for detecting malware botnet in the executable files of Windows operating system that are Herpestnet, Ann Loader, mbot, Vertexnet, Athena, Elite Loader, Gbot, dan Cythosia.},
booktitle = {Proceedings of the 17th International Conference on Electronic Commerce 2015},
articleno = {5},
numpages = {4},
keywords = {Malware Analysis, Executable File, Botnet},
location = {Seoul, Republic of Korea},
series = {ICEC '15}
}


@inproceedings{10.1145/1830483.1830703,
author = {Kim, Keehyung and Moon, Byung-Ro},
title = {Malware Detection Based on Dependency Graph Using Hybrid Genetic Algorithm},
year = {2010},
isbn = {9781450300728},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1830483.1830703},
doi = {10.1145/1830483.1830703},
abstract = {Computer malware is becoming a serious threat to our daily life in the information-based society. Especially, script malwares has become famous recently, since a wide range of programs supported scripting, the fact that makes such malwares spread easily. Because of viral polymorphism, current malware detection technologies cannot catch up the exponential growth of polymorphic malwares. In this paper, we propose a detection mechanism for script malwares, using dependency graph analysis. Every script malware can be represented by a dependency graph and then the detection can be transformed to the problem finding maximum subgraph isomorphism in that polymorphism still maintains the core of logical structures of malwares. We also present efficient heuristic approaches for maximum subgraph isomorphism, which improve detection accuracy and reduce computational cost. The experimental results of their use in a hybrid GA showed superior detection accuracy against state-of-the-art anti-virus softwares.},
booktitle = {Proceedings of the 12th Annual Conference on Genetic and Evolutionary Computation},
pages = {1211–1218},
numpages = {8},
keywords = {genetic algorithm, subgraph isomorphism, dependency graph, malware detection},
location = {Portland, Oregon, USA},
series = {GECCO '10}
}


@inproceedings{10.1145/3409073.3409084,
author = {Congyi, Deng and Guangshun, Shi},
title = {Method for Detecting Android Malware Based on Ensemble Learning},
year = {2020},
isbn = {9781450377645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3409073.3409084},
doi = {10.1145/3409073.3409084},
abstract = {In recent years, we have become increasingly dependent on smart devices. Android is an operating system mainly used on mobile devices, where hundreds of millions of users can download various apps through many application stores. Under these circumstances, a large number of malicious apps can be put into the application stores by developers to achieve the purpose of attacking, controlling user devices, and even stealing user information and property. Therefore, it is necessary to identify malwares in mass apps through analysis and detection to remind users. We propose an idea of detecting and discriminating Android malware based on an ensemble learning method. Firstly, a static analysis of AndroidManifest file in APK is performed to extract features such as permission calls, component calls, and intents in system. Then we use XGBoost method, an implementation of ensemble learning, to detect malicious applications. The conclusion is that this system performs very well in Android malware detection.},
booktitle = {Proceedings of the 2020 5th International Conference on Machine Learning Technologies},
pages = {28–31},
numpages = {4},
keywords = {Android Malware, Ensemble Learning, Malware Detection, Static Analysis},
location = {Beijing, China},
series = {ICMLT 2020}
}


@inproceedings{10.1145/2523514.2527006,
author = {Alam, Shahid and Horspool, R. Nigel and Traore, Issa},
title = {MAIL: Malware Analysis Intermediate Language: A Step towards Automating and Optimizing Malware Detection},
year = {2013},
isbn = {9781450324984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2523514.2527006},
doi = {10.1145/2523514.2527006},
abstract = {Dynamic binary obfuscation or metamorphism is a technique where a malware never keeps the same sequence of opcodes in the memory. Such malware are very difficult to analyse and detect manually even with the help of tools. We need to automate the analysis and detection process of such malware. This paper introduces and presents a new language named MAIL (Malware Analysis Intermediate Language) to automate and optimize this process. MAIL also provides portability for building malware analysis and detection tools. Each MAIL statement is assigned a pattern that can be used to annotate a control flow graph for pattern matching to analyse and detect metamorphic malware. Experimental evaluation of the proposed approach using an existing dataset yields malware detection rate of 93.92% and false positive rate of 3.02%.},
booktitle = {Proceedings of the 6th International Conference on Security of Information and Networks},
pages = {233–240},
numpages = {8},
keywords = {malware detection, static binary analysis, control flow graph, malware analysis, intermediate languages},
location = {Aksaray, Turkey},
series = {SIN '13}
}


@inproceedings{10.1145/2465529.2465531,
author = {Kong, Deguang and Yan, Guanhua},
title = {Discriminant Malware Distance Learning on Structuralinformation for Automated Malware Classification},
year = {2013},
isbn = {9781450319003},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2465529.2465531},
doi = {10.1145/2465529.2465531},
abstract = {In this work, we explore techniques that can automatically classify malware variants into their corresponding families. Our framework extracts structural information from malware programs as attributed function call graphs, further learns discriminant malware distance metrics, finally adopts an ensemble of classifiers for automated malware classification. Experimental results show that our method is able to achieve high classification accuracy.},
booktitle = {Proceedings of the ACM SIGMETRICS/International Conference on Measurement and Modeling of Computer Systems},
pages = {347–348},
numpages = {2},
keywords = {ensemble, control flow graph, distance learning, structure, malware, function call graph},
location = {Pittsburgh, PA, USA},
series = {SIGMETRICS '13}
}

@article{10.1145/2494232.2465531,
author = {Kong, Deguang and Yan, Guanhua},
title = {Discriminant Malware Distance Learning on Structuralinformation for Automated Malware Classification},
year = {2013},
issue_date = {June 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {1},
issn = {0163-5999},
url = {https://doi.org/10.1145/2494232.2465531},
doi = {10.1145/2494232.2465531},
abstract = {In this work, we explore techniques that can automatically classify malware variants into their corresponding families. Our framework extracts structural information from malware programs as attributed function call graphs, further learns discriminant malware distance metrics, finally adopts an ensemble of classifiers for automated malware classification. Experimental results show that our method is able to achieve high classification accuracy.},
journal = {SIGMETRICS Perform. Eval. Rev.},
month = jun,
pages = {347–348},
numpages = {2},
keywords = {distance learning, structure, function call graph, malware, ensemble, control flow graph}
}


@inproceedings{10.1145/3320326.3320333,
author = {Mourtaji, Youness and Bouhorma, Mohammed and Alghazzawi, Daniyal},
title = {Intelligent Framework for Malware Detection with Convolutional Neural Network},
year = {2019},
isbn = {9781450366458},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3320326.3320333},
doi = {10.1145/3320326.3320333},
abstract = {In this paper, we propose a deep learning framework for malware classification. There was a big boom within the quantity of malware in current years which poses an extreme safety chance to financial establishments, agencies, and people. In order to fight the proliferation of malware, new techniques are essential to quickly perceive and classify malware samples so that their behavior can be analyzed. Machine learning methods are becoming famous for classifying malware, but, the maximum of the modern gadget gaining knowledge of strategies for malware classification use machine learning algorithms (e.g., SVM). Currently, Convolutional Neural Networks (CNN), a deep getting to know approach, have proven advanced performance in comparison to traditional getting to know algorithms, particularly in duties which include image classification. Influenced by way of this achievement, we recommend a CNN-based architecture to classify malware samples. We convert malware binaries to a grayscale image, and at the end, we train a CNN network for classification. Experiments on hard malware classification datasets, Malimg, and Microsoft malware, reveal that our technique achieves higher than the modern-day overall performance.},
booktitle = {Proceedings of the 2nd International Conference on Networking, Information Systems &amp; Security},
articleno = {7},
numpages = {6},
keywords = {Network Security intelligence, Deep Learning, Malware Classification},
location = {Rabat, Morocco},
series = {NISS19}
}


@inproceedings{10.1145/2401603.2401672,
author = {Kang, Boojoong and Kim, Taekeun and Kwon, Heejun and Choi, Yangseo and Im, Eul Gyu},
title = {Malware Classification Method via Binary Content Comparison},
year = {2012},
isbn = {9781450314923},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2401603.2401672},
doi = {10.1145/2401603.2401672},
abstract = {With the wide spread uses of the Internet, the number of Internet attacks keeps increasing, and malware is the main cause of most Internet attacks. Malware is used by attackers to infect normal users' computers and to acquire private information as well as to attack other machines. The number of new malware and variants of malware is increasing every year because the automated tools allow attackers to generate the new malware or their variants easily. Therefore, performance improvement of the malware analysis is critical to prevent malware from spreading rapidly and to mitigate damages to users. In this paper, we proposed a new malware classification method by analyzing similarities of malware. Our method analyzes a small part of malware to reduce analysis overheads, and experimental results showed that our approach can effectively classify malware families.},
booktitle = {Proceedings of the 2012 ACM Research in Applied Computation Symposium},
pages = {316–321},
numpages = {6},
keywords = {binary analysis, static analysis, malware similarity, malware classification, malware detection},
location = {San Antonio, Texas},
series = {RACS '12}
}


@inbook{10.1145/3340531.3417467,
author = {Kim, Eujeanne and Park, Sung-Jun and Chae, Dong-Kyu and Choi, Seokwoo and Kim, Sang-Wook},
title = {A Human-in-the-Loop Approach to Malware Author Classification},
year = {2020},
isbn = {9781450368599},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3340531.3417467},
abstract = {For these few decades malwares have been posing a major concern in the cyber security. Recently, a number of "author groups" have been generating lots of newmalwares by sharing source code within a group and exploiting evasive schemes such as polymorphism and metamorphism. This motivates us to study the problem of identifying the author group of a given malware, which would be able to work for not only blocking malwares but also legally punishing suspected malware authors. In this paper, we propose a human-machine collaborative approach for classifying author groups of malwares accurately. We also propose a visualization method for helping human experts to make the decision easily. We verify the superiority of our framework through extensive experiments using real-world malware data.},
booktitle = {Proceedings of the 29th ACM International Conference on Information &amp; Knowledge Management},
pages = {3289–3292},
numpages = {4}
}


@inproceedings{10.1145/3230467.3230478,
author = {Alimardani, Hamidreza and Nazeh, Mohammed},
title = {A Taxonomy on Recent Mobile Malware: Features, Analysis Methods, and Detection Techniques},
year = {2018},
isbn = {9781450364300},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3230467.3230478},
doi = {10.1145/3230467.3230478},
abstract = {Smartphones, tablets, and other mobile devices have quickly become ubiquitous due to their highly personal and powerful attributes. Android has been the most popular mobile operating system. Such popularity, however, also extends to attackers. The amount of Android malware has risen steeply during the last few years, making it the most targeted mobile operating system. Although there have been numerous studies reviewing the current analysis and detection methods, they are unable to fully cover this research domain. Therefore, in this paper, we group the current analysis and detection methods in mobile malware detection. In addition, we review the Android features available in mobile malware detection, and several trusted and widely used datasets.},
booktitle = {Proceedings of the 2018 International Conference on E-Business and Mobile Commerce},
pages = {44–49},
numpages = {6},
keywords = {survey, taxonomy, Mobile malware, android},
location = {Chengdu, China},
series = {ICEMC '18}
}


@inproceedings{10.1145/3358331.3358342,
author = {Guo, Yunting and Fan, Wenqing},
title = {Feature Collection and Selection in Malware Classification},
year = {2019},
isbn = {9781450372022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3358331.3358342},
doi = {10.1145/3358331.3358342},
abstract = {In order to make up for the shortcomings of signature-based traditional classification methods, the supervised learning algorithms of machine learning and deep learning are gradually applied to malware detection and classification. Based on the Windows malware classification problem, we firstly introduce the collection techniques of different features. Then we discuss the impact of the different features from malware behavior selected on classification results. The results show that the fine-grained features are usually better than coarse-grained features, multi-features are better than single features under certain circumstances. Besides, the collection and training costs of static features are smaller than dynamic features. Finally, considering the factors of training time, complexity of feature collection and classification accuracy, we present our own views on the features that should be applied to malware classification issues in different situations.},
booktitle = {Proceedings of the 2019 International Conference on Artificial Intelligence and Advanced Manufacturing},
articleno = {11},
numpages = {5},
keywords = {behavior collection, classification, feature selection, machine learning, malware},
location = {Dublin, Ireland},
series = {AIAM 2019}
}


@article{10.1145/3378448,
author = {Tien, Chin-Wei and Chen, Shang-Wen and Ban, Tao and Kuo, Sy-Yen},
title = {Machine Learning Framework to Analyze IoT Malware Using ELF and Opcode Features},
year = {2020},
issue_date = {March 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {1},
issn = {2692-1626},
url = {https://doi.org/10.1145/3378448},
doi = {10.1145/3378448},
abstract = {Threats to devices that are part of the Internet of Things (IoT) are on the rise. Owing to the overwhelming diversity of IoT hardware and software, as well as its variants, conventional anti-virus techniques based on the Windows paradigm cannot be applied directly to counter threats to the IoT devices. In this article, we propose a framework that can efficiently analyze IoT malware in a wide range of environments. It consists of a universal feature representation obtained by static analysis of the malware and a machine learning scheme that first detects the malware and then classifies it into a known category. The framework was evaluated by applying it to a recently developed dataset consisting of more than 6,000 IoT malware samples collected from the HoneyPot project. The results show that the proposed method can obtain near-optimal accuracy in terms of the detection and classification of malware targeting IoT devices.},
journal = {Digital Threats: Research and Practice},
month = mar,
articleno = {5},
numpages = {19},
keywords = {IoT security, malware detection, opcode analysis, malware classification, ELF analysis, machine learning}
}


@inproceedings{10.1145/3190645.3190692,
author = {Cakir, Bugra and Dogdu, Erdogan},
title = {Malware Classification Using Deep Learning Methods},
year = {2018},
isbn = {9781450356961},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3190645.3190692},
doi = {10.1145/3190645.3190692},
abstract = {Malware, short for Malicious Software, is growing continuously in numbers and sophistication as our digital world continuous to grow. It is a very serious problem and many efforts are devoted to malware detection in today's cybersecurity world. Many machine learning algorithms are used for the automatic detection of malware in recent years. Most recently, deep learning is being used with better performance. Deep learning models are shown to work much better in the analysis of long sequences of system calls. In this paper a shallow deep learning-based feature extraction method (word2vec) is used for representing any given malware based on its opcodes. Gradient Boosting algorithm is used for the classification task. Then, k-fold cross-validation is used to validate the model performance without sacrificing a validation split. Evaluation results show up to 96% accuracy with limited sample data.},
booktitle = {Proceedings of the ACMSE 2018 Conference},
articleno = {10},
numpages = {5},
keywords = {deep learning, classification, supervised learning, malware detection, machine learning},
location = {Richmond, Kentucky},
series = {ACMSE '18}
}


@inproceedings{10.1145/2897845.2897918,
author = {Rahbarinia, Babak and Balduzzi, Marco and Perdisci, Roberto},
title = {Real-Time Detection of Malware Downloads via Large-Scale URL-&gt;File-&gt;Machine Graph Mining},
year = {2016},
isbn = {9781450342339},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2897845.2897918},
doi = {10.1145/2897845.2897918},
abstract = {In this paper we propose Mastino, a novel defense system to detect malware download events. A download event is a 3-tuple that identifies the action of downloading a file from a URL that was triggered by a client (machine). Mastino utilizes global situation awareness and continuously monitors various network- and system-level events of the clients' machines across the Internet and provides real time classification of both files and URLs to the clients upon submission of a new, unknown file or URL to the system. To enable detection of the download events, Mastino builds a large download graph that captures the subtle relationships among the entities of download events, i.e. files, URLs, and machines. We implemented a prototype version of Mastino and evaluated it in a large-scale real-world deployment. Our experimental evaluation shows that Mastino can accurately classify malware download events with an average of 95.5% true positive (TP), while incurring less than 0.5% false positives (FP). In addition, we show the Mastino can classify a new download event as either benign or malware in just a fraction of a second, and is therefore suitable as a real time defense system.},
booktitle = {Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security},
pages = {783–794},
numpages = {12},
keywords = {machine learning, graph mining, malware detection},
location = {Xi'an, China},
series = {ASIA CCS '16}
}


@inproceedings{10.1145/3267494.3267496,
author = {Yang, Chun and Wen, Yu and Guo, Jianbin and Song, Haitao and Li, Linfeng and Che, Haoyang and Meng, Dan},
title = {A Convolutional Neural Network Based Classifier for Uncompressed Malware Samples},
year = {2018},
isbn = {9781450359917},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3267494.3267496},
doi = {10.1145/3267494.3267496},
abstract = {This paper proposes a deep learning based method for efficient malware classification. Specially, we convert the malware classification problem into the image classification problem, which can be addressed through leveraging convolutional neural networks (CNNs). For many malware families, the images belonging to the same family have similar contours and textures, so we convert the Binary files of malware samples to uncompressed gray-scale images which possess complete information of the original malware without artificial feature extraction. We then design classifier based on Tensorflow framework of Google by combining the deep learning (DL) and malware detection technology. Experimental results show that the uncompressed gray-scale images of the malware are relatively easy to distinguish and the CNN based classifier can achieve a high success rate of 98.2%},
booktitle = {Proceedings of the 1st Workshop on Security-Oriented Designs of Computer Architectures and Processors},
pages = {15–17},
numpages = {3},
keywords = {uncompressed gray-scale images, deep learning (dl), convolutional neural networks (cnns), tensorflow framework, malware classification},
location = {Toronto, Canada},
series = {SecArch'18}
}


@inproceedings{10.1145/3338840.3355684,
author = {Hong, Jiwon and Park, Sung-Jun and Kim, Taeri and Noh, Yung-Kyun and Kim, Sang-Wook and Kim, Dongphil and Kim, Wonho},
title = {Malware Classification for Identifying Author Groups: A Graph-Based Approach},
year = {2019},
isbn = {9781450368438},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3338840.3355684},
doi = {10.1145/3338840.3355684},
abstract = {As our lives become increasingly dependent on computer software, the threat of malware attacks is getting greater. By slightly modifying the previous version to avoid malware detection, the attackers can continuously release new malwares with ease. However, malwares released by a group of authors might contain some evidence among them that they are developed by the same group of authors. Such information can be used for digital forensics, law enforcement, and deeper analysis of malwares. In this paper, we propose a graph-based approach to classify author groups of given malware samples. In addition, we propose graph refinement strategies to improve classification accuracies. Via extensive experiments on a real-world dataset, we verify our graph-based classification could benefit author group classification of malwares than traditional feature-based SVM. We also verify the proposed graph refinement strategies increase the accuracy of the classification.},
booktitle = {Proceedings of the Conference on Research in Adaptive and Convergent Systems},
pages = {169–174},
numpages = {6},
keywords = {malware classification, author group identification, graph-based classification},
location = {Chongqing, China},
series = {RACS '19}
}


@inproceedings{10.1145/3129676.3129712,
author = {Kwon, Iltaek and Im, Eul Gyu},
title = {Extracting the Representative API Call Patterns of Malware Families Using Recurrent Neural Network},
year = {2017},
isbn = {9781450350273},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3129676.3129712},
doi = {10.1145/3129676.3129712},
abstract = {With thousands of malware samples pouring out every day, how can we reduce malware analysis time and detect them effectively? Malware family classification provides one of good measures to predict characteristics of unknown malware since malware belonging to the same family can have similar features. Static analysis and dynamic analysis are techniques to obtain features to be used for classifying malware samples to their families. Static analysis performs analysis based on specific signatures included in the malware. Static analysis has the advantages that the scope of the analysis covers the entire code, and the analysis can be performed without executing the malware. However, it is very difficult to detect or classify malware variants with only the results of the static analysis, because malware developers use polymorphic or encryption techniques to avoid static analysis-based detection of anti-virus software. Dynamic analysis analyzes malware behaviors, so the results of dynamic analysis can be used to detect or classify malware variants. One of dynamic features that can be used to detect or classify malware variants is API call sequences. In this paper, we propose a novel method to extract representative API call patterns of malware families using Recurrent Neural Network (RNN). We conducted experiments with 787 malware samples belonging to 9 families. In our experiments, we extracted representative API call patterns of 9 malware families on 551 samples as a training set and performed classification on the 236 samples as a test set. Classification accuracy results using API call patterns extracted from RNN were measured as 71% on average. The results show the feasibility of our approach using RNN to extract representative API call pattern of malware families for malware family classification.},
booktitle = {Proceedings of the International Conference on Research in Adaptive and Convergent Systems},
pages = {202–207},
numpages = {6},
keywords = {Malware Classification, Representative API Call Pattern, Recurrent Neural Network},
location = {Krakow, Poland},
series = {RACS '17}
}


@inproceedings{10.1145/3318236.3318255,
author = {Sun, Zhi and Rao, Zhihong and Chen, Jianfeng and Xu, Rui and He, Da and Yang, Hui and Liu, Jie},
title = {An Opcode Sequences Analysis Method For Unknown Malware Detection},
year = {2019},
isbn = {9781450362450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3318236.3318255},
doi = {10.1145/3318236.3318255},
abstract = {One of the main challenges in security today is defending against unknown malware attacks which have the potential to harm a computer or network. Hence, detecting malware has become one of the most important challenges for the security of computer systems. The known malware detection methods based on the appearance of opcode sequences has to construct a matrix from programs of different architectures to extract high-level features. In order to resolve high dimensional inputs vector and differences assembly instruction, this paper proposes a novel method for detecting static characteristics of 32-bit and 64-bit malicious Portable Executable (PE) Windows files by opcode sequences analysis. By compute the frequency of occurrence of each opcode sequence and distinguishing different types of 32-bit and 64-bit PE files, the proposed method shows promising results with less complexity in comparison with previous studies, which is beneficial to train machine learning model such as k-nearest neighbor (KNN) and back-propagation neural network (BP). Our method is evaluated on more than 20,000 samples, and experimental results show that our system can effectively detect and classify unknown malware.},
booktitle = {Proceedings of the 2019 2nd International Conference on Geoinformatics and Data Analysis},
pages = {15–19},
numpages = {5},
keywords = {classification, machine learning, Malware detection, computer security},
location = {Prague, Czech Republic},
series = {ICGDA 2019}
}


@inproceedings{10.1145/3387168.3387218,
author = {Ahmad, Azuan and Shafiuddin, Wan and Kama, Mohd Nazri and Saudi, Madihah Mohd},
title = {A New Cryptojacking Malware Classifier Model Based on Dendritic Cell Algorithm},
year = {2019},
isbn = {9781450376259},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3387168.3387218},
doi = {10.1145/3387168.3387218},
abstract = {A new threat known as "cryptojacking" has entered the picture where cryptojacking malware is the future trend for cyber criminals, who infect victim's device, install cryptojacking malware, and use the stolen resources for crytocurrency mining. Worse comes to worst by 2020, researchers estimate there will be 30 billion of IoT devices in the world. IoT devices are vulnerable to attacks because of their simple configuration, unpatched vulnerability and weak passwords. IoT devices also prone to be poorly monitored because of their nature. There is lack of studies that provide in depth analysis on cryptojacking malware classification using machine learning approach where the current research mostly focused on manual analysis of web-based cryptojacking attacks. As IoT devices requires small processing capability, a lightweight model are required for the cryptojacking malware detection algorithm to maintain its accuracy without sacrificing the performance of other process. As a solution, we propose a new lightweight cryptojacking classifier model based on machine learning technique that may fit in a low processing capability environment such as IoT and Cyber Physical Systems (CPS). This paper aim to disscuss a new approach based on dendritic cell algorithm in order to provide a lightweight cryptojacking classifier model. The output of this paper will be significant used in detecting cryptojacking malware attacks that benefits multiple industries including cyber security contractors, oil and gas, water, power and energy industries.},
booktitle = {Proceedings of the 3rd International Conference on Vision, Image and Signal Processing},
articleno = {84},
numpages = {5},
keywords = {Cryptojacking, Malware, Cyber Security, Artificial Intelligence, Dendritic Cell Algorithm},
location = {Vancouver, BC, Canada},
series = {ICVISP 2019}
}


@inproceedings{10.1145/2857705.2857713,
author = {Ahmadi, Mansour and Ulyanov, Dmitry and Semenov, Stanislav and Trofimov, Mikhail and Giacinto, Giorgio},
title = {Novel Feature Extraction, Selection and Fusion for Effective Malware Family Classification},
year = {2016},
isbn = {9781450339353},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2857705.2857713},
doi = {10.1145/2857705.2857713},
abstract = {Modern malware is designed with mutation characteristics, namely polymorphism and metamorphism, which causes an enormous growth in the number of variants of malware samples. Categorization of malware samples on the basis of their behaviors is essential for the computer security community, because they receive huge number of malware everyday, and the signature extraction process is usually based on malicious parts characterizing malware families. Microsoft released a malware classification challenge in 2015 with a huge dataset of near 0.5 terabytes of data, containing more than 20K malware samples. The analysis of this dataset inspired the development of a novel paradigm that is effective in categorizing malware variants into their actual family groups. This paradigm is presented and discussed in the present paper, where emphasis has been given to the phases related to the extraction, and selection of a set of novel features for the effective representation of malware samples. Features can be grouped according to different characteristics of malware behavior, and their fusion is performed according to a per-class weighting paradigm. The proposed method achieved a very high accuracy ($approx$ 0.998) on the Microsoft Malware Challenge dataset.},
booktitle = {Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy},
pages = {183–194},
numpages = {12},
keywords = {machine learning, microsoft malware classification challenge, computer security, malware family, windows malware, classification},
location = {New Orleans, Louisiana, USA},
series = {CODASPY '16}
}


@inproceedings{10.1145/2816839.2816921,
author = {Belaoued, Mohamed and Mazouzi, Smaine},
title = {Towards an Automatic Method for API Association Extraction for PE-Malware Categorization},
year = {2015},
isbn = {9781450334587},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2816839.2816921},
doi = {10.1145/2816839.2816921},
abstract = {Behavior-based malware detection techniques remain one of the most efficient protections against malicious programs. Such techniques are based on constructing models representing malicious and legitimate behaviors by analyzing the set of APIs (Application Programming Interface) called by a program. Most of the existing behavior-based methods that provide a multiclass categorization of malware manually generate the models for each malware category. Due to the large number of existing malware types such techniques can be compute intensive and resource consuming. In this paper, we propose a new method based on the MCA (Multiple Correspondence Analysis) for identifying the set of most likely used APIs by PE (Portable Executable) malware. Our method will provide a clustering of likely used APIs according to different malware types.},
booktitle = {Proceedings of the International Conference on Intelligent Information Processing, Security and Advanced Communication},
articleno = {40},
numpages = {4},
keywords = {Multiple Correspondence Analysis, Malware Categorization, Portable Executable, Windows API, Manhattan Distance Metric},
location = {Batna, Algeria},
series = {IPAC '15}
}


@inproceedings{10.1145/2816839.2816921,
author = {Belaoued, Mohamed and Mazouzi, Smaine},
title = {Towards an Automatic Method for API Association Extraction for PE-Malware Categorization},
year = {2015},
isbn = {9781450334587},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2816839.2816921},
doi = {10.1145/2816839.2816921},
abstract = {Behavior-based malware detection techniques remain one of the most efficient protections against malicious programs. Such techniques are based on constructing models representing malicious and legitimate behaviors by analyzing the set of APIs (Application Programming Interface) called by a program. Most of the existing behavior-based methods that provide a multiclass categorization of malware manually generate the models for each malware category. Due to the large number of existing malware types such techniques can be compute intensive and resource consuming. In this paper, we propose a new method based on the MCA (Multiple Correspondence Analysis) for identifying the set of most likely used APIs by PE (Portable Executable) malware. Our method will provide a clustering of likely used APIs according to different malware types.},
booktitle = {Proceedings of the International Conference on Intelligent Information Processing, Security and Advanced Communication},
articleno = {40},
numpages = {4},
keywords = {Multiple Correspondence Analysis, Malware Categorization, Portable Executable, Windows API, Manhattan Distance Metric},
location = {Batna, Algeria},
series = {IPAC '15}
}


@article{10.1145/3417978,
author = {Qiu, Junyang and Zhang, Jun and Luo, Wei and Pan, Lei and Nepal, Surya and Xiang, Yang},
title = {A Survey of Android Malware Detection with Deep Neural Models},
year = {2020},
issue_date = {February 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {53},
number = {6},
issn = {0360-0300},
url = {https://doi.org/10.1145/3417978},
doi = {10.1145/3417978},
abstract = {Deep Learning (DL) is a disruptive technology that has changed the landscape of cyber security research. Deep learning models have many advantages over traditional Machine Learning (ML) models, particularly when there is a large amount of data available. Android malware detection or classification qualifies as a big data problem because of the fast booming number of Android malware, the obfuscation of Android malware, and the potential protection of huge values of data assets stored on the Android devices. It seems a natural choice to apply DL on Android malware detection. However, there exist challenges for researchers and practitioners, such as choice of DL architecture, feature extraction and processing, performance evaluation, and even gathering adequate data of high quality. In this survey, we aim to address the challenges by systematically reviewing the latest progress in DL-based Android malware detection and classification. We organize the literature according to the DL architecture, including FCN, CNN, RNN, DBN, AE, and hybrid models. The goal is to reveal the research frontier, with the focus on representing code semantics for Android malware detection. We also discuss the challenges in this emerging field and provide our view of future research opportunities and directions.},
journal = {ACM Comput. Surv.},
month = dec,
articleno = {126},
numpages = {36},
keywords = {Android malware, deep learning, feature representation, machine learning, neural network, malware detection}
}


@inproceedings{10.1145/1626195.1626251,
author = {P., Vinod and Laxmi, Vijay and Gaur, Manoj Singh and Kumar, GVSS Phani and Chundawat, Yadvendra S.},
title = {Static CFG Analyzer for Metamorphic Malware Code},
year = {2009},
isbn = {9781605584126},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1626195.1626251},
doi = {10.1145/1626195.1626251},
abstract = {Malware detection and prevention methods are increasingly becoming important particularly for all computer systems connected to Internet. The term 'Malware' is collectively used for viruses, worms, Trojan's etc. Malicious activities of malware is to steal, modify, leak the data to external server or consuming system resources thereby degrading the performance of system. To avoid detection, malicious code(s) generates multiple variants while they propagate. In past, researchers have addressed malware detection using Control Flow Graph (CFG). These detection methods were based on comparison of shapes of CFG's of original sample with that of variants.The proposed approach compares instructions at basic block of original malware with that of the variants using longest common subsequence (LCS). Some viruses and benign programs have been used in the test set. Preliminary results are promising to prove the effectiveness of our proposed methodology.},
booktitle = {Proceedings of the 2nd International Conference on Security of Information and Networks},
pages = {225–228},
numpages = {4},
keywords = {obfuscation, normalization, metamorphic malware, longest common subsequence, control flow graph},
location = {Famagusta, North Cyprus},
series = {SIN '09}
}


@inproceedings{10.1145/1968613.1968704,
author = {Lee, Jinkyung and Im, Chaetae and Jeong, Hyuncheol},
title = {A Study of Malware Detection and Classification by Comparing Extracted Strings},
year = {2011},
isbn = {9781450305716},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1968613.1968704},
doi = {10.1145/1968613.1968704},
abstract = {Recently, the number of Malware incidents has been rapidly increasing but we are too short of experts to handle the situation. Fortunately, most Malware instances are a mutation of an existing one, so it might be effective to use an auto-analysis system to observe a specific Malware. The auto-analysis system for Malware uses both the dynamic and static methods, but the latter still has some limitations and accordingly requires further research.However, this study uses the static method, which calculates the similarity between two files to be executed through by comparing character strings to identify and classify Malware. This method, whose performance depends on the number and type of character strings to be compared, requires a process to refine the character strings. In addition, it provides an advanced comparison mechanism that reflects the characteristics of the character strings held by a specific Malware, in the calculation of similarity.},
booktitle = {Proceedings of the 5th International Conference on Ubiquitous Information Management and Communication},
articleno = {75},
numpages = {4},
keywords = {edit distance, malware analysis, static analysis},
location = {Seoul, Korea},
series = {ICUIMC '11}
}


@inproceedings{10.1145/3292006.3302385,
author = {Faridi, Houtan and Srinivasagopalan, Srivathsan and Verma, Rakesh},
title = {Parameter Tuning and Confidence Limits of Malware Clustering},
year = {2019},
isbn = {9781450360999},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3292006.3302385},
doi = {10.1145/3292006.3302385},
abstract = {The growing number of new malware and the sophisticated obfuscation techniques used by malware authors are causing major problems in identifying, managing, and releasing anti-malware products to the consumers. Clustering malware variants based on their behavior has the potential to ease this problem of scale and conveniently lend itself to better, faster, and efficient prioritization of malware analysis. In this paper, we cluster real-world malware and expand on commonly used algorithms through fine grained testing. Results of top performing algorithms are discussed.},
booktitle = {Proceedings of the Ninth ACM Conference on Data and Application Security and Privacy},
pages = {169–171},
numpages = {3},
keywords = {malware, unsupervised learning, clustering, malware classification},
location = {Richardson, Texas, USA},
series = {CODASPY '19}
}


@inproceedings{10.1145/2513228.2513294,
author = {Han, KyoungSoo and Lim, Jae Hyun and Im, Eul Gyu},
title = {Malware Analysis Method Using Visualization of Binary Files},
year = {2013},
isbn = {9781450323482},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2513228.2513294},
doi = {10.1145/2513228.2513294},
abstract = {Malware authors have been generating and disseminating malware variants through various ways, such as reusing modules or using automated malware generation tools. With the help of the malware generation techniques, the number of malware keeps increasing every year. Therefore, new malware analysis techniques are needed to reduce malware analysis overheads. Recently several malware visualization methods were proposed to help malware analysts. In this paper, we proposed a novel method to visually analyze malware by transforming malware binary information into image matrices. Our experimental results show that the image matrices of malware can effectively classify malware families.},
booktitle = {Proceedings of the 2013 Research in Adaptive and Convergent Systems},
pages = {317–321},
numpages = {5},
keywords = {malware detection, malware similarity, malware analysis, malware visualization},
location = {Montreal, Quebec, Canada},
series = {RACS '13}
}


@inproceedings{10.1145/3433174.3433609,
author = {Sahin, Muhammet and Bahtiyar, Serif},
title = {A Survey on Malware Detection with Deep Learning},
year = {2020},
isbn = {9781450387514},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3433174.3433609},
doi = {10.1145/3433174.3433609},
abstract = { Rapid development of Internet and technology has emerged a bunch of evolving malware and attack strategies. Therefore researchers focused on machine learning and deep learning methods to detect malware (viruses, bots, ransomware, trojans). In order to protect users from this treats many companies have been developing new algorithms and products. However, malware types have been increasing dramatically. Anti-malware producers have been detecting with millions of new malware types each year. So in order to stop that increase, there is an urgent need to develop new intelligent methods on malware detection. In this work, we have overviewed current intelligent machine learning and deep learning methods to solve malware detection. In this sense, we will present malware feature extraction and classification methods. Also, we will discuss more issues and challenges on that problem. Finally, we will share our foresight on malware detection methods.},
booktitle = {13th International Conference on Security of Information and Networks},
articleno = {34},
numpages = {6},
keywords = {Classification, Detection, Deep Learning, Malware},
location = {Merkez, Turkey},
series = {SIN 2020}
}


@article{10.1145/3329786,
author = {Or-Meir, Ori and Nissim, Nir and Elovici, Yuval and Rokach, Lior},
title = {Dynamic Malware Analysis in the Modern Era—A State of the Art Survey},
year = {2019},
issue_date = {October 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {5},
issn = {0360-0300},
url = {https://doi.org/10.1145/3329786},
doi = {10.1145/3329786},
abstract = {Although malicious software (malware) has been around since the early days of computers, the sophistication and innovation of malware has increased over the years. In particular, the latest crop of ransomware has drawn attention to the dangers of malicious software, which can cause harm to private users as well as corporations, public services (hospitals and transportation systems), governments, and security institutions. To protect these institutions and the public from malware attacks, malicious activity must be detected as early as possible, preferably before it conducts its harmful acts. However, it is not always easy to know what to look for—especially when dealing with new and unknown malware that has never been seen. Analyzing a suspicious file by static or dynamic analysis methods can provide relevant and valuable information regarding a file's impact on the hosting system and help determine whether the file is malicious or not, based on the method's predefined rules. While various techniques (e.g., code obfuscation, dynamic code loading, encryption, and packing) can be used by malware writers to evade static analysis (including signature-based anti-virus tools), dynamic analysis is robust to these techniques and can provide greater understanding regarding the analyzed file and consequently can lead to better detection capabilities. Although dynamic analysis is more robust than static analysis, existing dynamic analysis tools and techniques are imperfect, and there is no single tool that can cover all aspects of malware behavior. The most recent comprehensive survey performed in this area was published in 2012. Since that time, the computing environment has changed dramatically with new types of malware (ransomware, cryptominers), new analysis methods (volatile memory forensics, side-channel analysis), new computing environments (cloud computing, IoT devices), new machine-learning algorithms, and more. The goal of this survey is to provide a comprehensive and up-to-date overview of existing methods used to dynamically analyze malware, which includes a description of each method, its strengths and weaknesses, and its resilience against malware evasion techniques. In addition, we include an overview of prominent studies presenting the usage of machine-learning methods to enhance dynamic malware analysis capabilities aimed at detection, classification, and categorization.},
journal = {ACM Comput. Surv.},
month = sep,
articleno = {88},
numpages = {48},
keywords = {evasion, detection, behavioral analysis, Dynamic analysis, malware}
}


@article{10.1145/3329786,
author = {Or-Meir, Ori and Nissim, Nir and Elovici, Yuval and Rokach, Lior},
title = {Dynamic Malware Analysis in the Modern Era—A State of the Art Survey},
year = {2019},
issue_date = {October 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {5},
issn = {0360-0300},
url = {https://doi.org/10.1145/3329786},
doi = {10.1145/3329786},
abstract = {Although malicious software (malware) has been around since the early days of computers, the sophistication and innovation of malware has increased over the years. In particular, the latest crop of ransomware has drawn attention to the dangers of malicious software, which can cause harm to private users as well as corporations, public services (hospitals and transportation systems), governments, and security institutions. To protect these institutions and the public from malware attacks, malicious activity must be detected as early as possible, preferably before it conducts its harmful acts. However, it is not always easy to know what to look for—especially when dealing with new and unknown malware that has never been seen. Analyzing a suspicious file by static or dynamic analysis methods can provide relevant and valuable information regarding a file's impact on the hosting system and help determine whether the file is malicious or not, based on the method's predefined rules. While various techniques (e.g., code obfuscation, dynamic code loading, encryption, and packing) can be used by malware writers to evade static analysis (including signature-based anti-virus tools), dynamic analysis is robust to these techniques and can provide greater understanding regarding the analyzed file and consequently can lead to better detection capabilities. Although dynamic analysis is more robust than static analysis, existing dynamic analysis tools and techniques are imperfect, and there is no single tool that can cover all aspects of malware behavior. The most recent comprehensive survey performed in this area was published in 2012. Since that time, the computing environment has changed dramatically with new types of malware (ransomware, cryptominers), new analysis methods (volatile memory forensics, side-channel analysis), new computing environments (cloud computing, IoT devices), new machine-learning algorithms, and more. The goal of this survey is to provide a comprehensive and up-to-date overview of existing methods used to dynamically analyze malware, which includes a description of each method, its strengths and weaknesses, and its resilience against malware evasion techniques. In addition, we include an overview of prominent studies presenting the usage of machine-learning methods to enhance dynamic malware analysis capabilities aimed at detection, classification, and categorization.},
journal = {ACM Comput. Surv.},
month = sep,
articleno = {88},
numpages = {48},
keywords = {evasion, detection, behavioral analysis, Dynamic analysis, malware}
}


@inproceedings{10.1145/2491411.2494599,
author = {Song, Fu and Touili, Tayssir},
title = {PoMMaDe: Pushdown Model-Checking for Malware Detection},
year = {2013},
isbn = {9781450322379},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491411.2494599},
doi = {10.1145/2491411.2494599},
abstract = { We present PoMMaDe, a Pushd own Model-checking based M alware D etector. In PoMMaDe, a binary program is modeled as a pushdown system (PDS) which allows to track the stack of the program, and malicious behaviors are specified in SCTPL or SLTPL, where SCTPL (resp. SLTPL) is an extension of CTL (resp. LTL) with variables, quantifiers, and predicates over the stack (needed for malware specification). The malware detection problem is reduced to SCTPL/SLTPL model-checking for PDSs. PoMMaDe allows us to detect 600 real malwares, 200 new malwares generated by two malware generators NGVCK and VCL32, and prove benign programs are benign. In particular, PoMMaDe was able to detect several malwares that could not be detected by well-known anti-viruses such as Avira, Avast, Kaspersky, McAfee, AVG, BitDefender, Eset Nod32, F-Secure, Norton, Panda, Trend Micro and Qihoo 360. },
booktitle = {Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering},
pages = {607–610},
numpages = {4},
keywords = {Model-Checking, Pushdown Systems, Malware Detection},
location = {Saint Petersburg, Russia},
series = {ESEC/FSE 2013}
}


@inproceedings{10.1145/2016904.2016908,
author = {Nataraj, L. and Karthikeyan, S. and Jacob, G. and Manjunath, B. S.},
title = {Malware Images: Visualization and Automatic Classification},
year = {2011},
isbn = {9781450306799},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2016904.2016908},
doi = {10.1145/2016904.2016908},
abstract = {We propose a simple yet effective method for visualizing and classifying malware using image processing techniques. Malware binaries are visualized as gray-scale images, with the observation that for many malware families, the images belonging to the same family appear very similar in layout and texture. Motivated by this visual similarity, a classification method using standard image features is proposed. Neither disassembly nor code execution is required for classification. Preliminary experimental results are quite promising with 98% classification accuracy on a malware database of 9,458 samples with 25 different malware families. Our technique also exhibits interesting resilience to popular obfuscation techniques such as section encryption.},
booktitle = {Proceedings of the 8th International Symposium on Visualization for Cyber Security},
articleno = {4},
numpages = {7},
keywords = {malware visualization, image processing, malware, computer security, image texture, malware classification, visualization},
location = {Pittsburgh, Pennsylvania, USA},
series = {VizSec '11}
}


@inproceedings{10.1145/1966913.1966940,
author = {Rhee, Junghwan and Lin, Zhiqiang and Xu, Dongyan},
title = {Characterizing Kernel Malware Behavior with Kernel Data Access Patterns},
year = {2011},
isbn = {9781450305648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1966913.1966940},
doi = {10.1145/1966913.1966940},
abstract = {Characterizing malware behavior using its control flow faces several challenges, such as obfuscations in static analysis and the behavior variations in dynamic analysis. This paper introduces a new approach to characterizing kernel malware's behavior by using kernel data access patterns unique to the malware. The approach neither uses malware's control flow consisting of temporal ordering of malware code execution, nor the code-specific information about the malware. Thus, the malware signature based on such data access patterns is resilient in matching malware variants.To evaluate the effectiveness of this approach, we first generated the signatures of three classic rootkits using their data access patterns, and then matched them with a group of kernel execution instances which are benign or compromised by 16 kernel rootkits. The malware signatures did not trigger any false positives in benign kernel runs; however, kernel runs compromised by 16 rootkits were detected due to the data access patterns shared with the compared signature(s). We further observed similar data access patterns in the signatures of the tested rootkits and exposed popular rootkit attack operations by ranking common data behavior across rootkits. Our experiments show that our approach is effective not only to detect the malware whose signature is available, but also to determine its variants which share kernel data access patterns.},
booktitle = {Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security},
pages = {207–216},
numpages = {10},
keywords = {kernel data access patterns, kernel malware signature, kernel malware analysis},
location = {Hong Kong, China},
series = {ASIACCS '11}
}


@inproceedings{10.1145/2330784.2331029,
author = {Kim, Jinhyun and Moon, Byung-Ro},
title = {New Malware Detection System Using Metric-Based Method and Hybrid Genetic Algorithm},
year = {2012},
isbn = {9781450311786},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2330784.2331029},
doi = {10.1145/2330784.2331029},
abstract = {Malicious software, or malware for short, is one of the most serious threats to computer systems. Malware disguise techniques are becoming more sophisticated, and signature-based malware detection systems can not cope with disguised malware timely. In this paper, we propose a new approach to detect disguised malware, focusing on the malware scripts. The proposed system consists of a metric-based detection algorithm and a hybrid genetic algorithm. The genetic algorithm tries further detection by extracting the main core of a program. Experimental tests on the proposed system show a remarkable performance improvement over existing anti-virus programs.},
booktitle = {Proceedings of the 14th Annual Conference Companion on Genetic and Evolutionary Computation},
pages = {1527–1528},
numpages = {2},
keywords = {malware disguise techniques, metric-based method, malware detection, hybrid genetic algorithm},
location = {Philadelphia, Pennsylvania, USA},
series = {GECCO '12}
}


@inproceedings{10.1145/3133956.3134099,
author = {Korczynski, David and Yin, Heng},
title = {Capturing Malware Propagations with Code Injections and Code-Reuse Attacks},
year = {2017},
isbn = {9781450349468},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3133956.3134099},
doi = {10.1145/3133956.3134099},
abstract = {Defending against malware involves analysing large amounts of suspicious samples. To deal with such quantities we rely heavily on automatic approaches to determine whether a sample is malicious or not. Unfortunately, complete and precise automatic analysis of malware is far from an easy task. This is because malware is often designed to contain several techniques and countermeasures specifically to hinder analysis. One of these techniques is for the malware to propagate through the operating system so as to execute in the context of benign processes. The malware does this by writing memory to a given process and then proceeds to have this memory execute. In some cases these propagations are trivial to capture because they rely on well-known techniques. However, in the cases where malware deploys novel code injection techniques, rely on code-reuse attacks and potentially deploy dynamically generated code, the problem of capturing a complete and precise view of the malware execution is non-trivial.In this paper we present a unified approach to tracing malware propagations inside the host in the context of code injections and code-reuse attacks. We also present, to the knowledge of the authors, the first approach to identifying dynamically generated code based on information-flow analysis. We implement our techniques in a system called Tartarus and match Tartarus with both synthetic applications and real-world malware. We compare Tartarus to previous works and show that our techniques substantially improve the precision for collecting malware execution traces, and that our approach can capture intrinsic characteristics of novel code injection techniques.},
booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
pages = {1691–1708},
numpages = {18},
keywords = {taint analysis, code injection, security, malware},
location = {Dallas, Texas, USA},
series = {CCS '17}
}


@inproceedings{10.1145/2103380.2103441,
author = {Han, Kyoung Soo and Kang, Boojoong and Im, Eul Gyu},
title = {Malware Classification Using Instruction Frequencies},
year = {2011},
isbn = {9781450310871},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2103380.2103441},
doi = {10.1145/2103380.2103441},
abstract = {Developing variants of malware is a common and effective method to avoid the signature detection of antivirus programs. Malware analysis and signature abstraction are essential technologies to update the detection signature DB for malware detection. Since most malware binary analysis processes are performed manually, malware binary analysis is a time-consuming job. Therefore, efficient malware classification can be used to speed up malware binary analysis. As malware variants of the same malware family may share a portion of their binary code, the sequences of instructions may be similar, or even identical. In this paper, we propose a malware classification method that uses instruction frequencies. Our test results show that there are clear distinctions among malware and normal programs.},
booktitle = {Proceedings of the 2011 ACM Symposium on Research in Applied Computation},
pages = {298–300},
numpages = {3},
keywords = {malware analysis, instruction frequency, malware classification},
location = {Miami, Florida},
series = {RACS '11}
}


@inproceedings{10.1145/3372297.3417291,
author = {Zhang, Xiaohan and Zhang, Yuan and Zhong, Ming and Ding, Daizong and Cao, Yinzhi and Zhang, Yukun and Zhang, Mi and Yang, Min},
title = {Enhancing State-of-the-Art Classifiers with API Semantics to Detect Evolved Android Malware},
year = {2020},
isbn = {9781450370899},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3372297.3417291},
doi = {10.1145/3372297.3417291},
abstract = {Machine learning (ML) classifiers have been widely deployed to detect Android malware, but at the same time the application of ML classifiers also faces an emerging problem. The performance of such classifiers degrades---or called ages---significantly over time given the malware evolution. Prior works have proposed to use retraining or active learning to reverse and improve aged models. However, the underlying classifier itself is still blind, unaware of malware evolution. Unsurprisingly, such evolution-insensitive retraining or active learning comes at a price, i.e., the labeling of tens of thousands of malware samples and the cost of significant human efforts. In this paper, we propose the first framework, called APIGraph, to enhance state-of-the-art malware classifiers with the similarity information among evolved Android malware in terms of semantically-equivalent or similar API usages, thus naturally slowing down classifier aging. Our evaluation shows that because of the slow-down of classifier aging, APIGraph saves significant amounts of human efforts required by active learning in labeling new malware samples.},
booktitle = {Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security},
pages = {757–770},
numpages = {14},
keywords = {model aging, api semantics, evolved malware detection},
location = {Virtual Event, USA},
series = {CCS '20}
}


@inproceedings{10.1145/3287921.3287971,
author = {Sang, Dinh Viet and Cuong, Dang Manh and Cuong, Le Tran Bao},
title = {An Effective Ensemble Deep Learning Framework for Malware Detection},
year = {2018},
isbn = {9781450365390},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287921.3287971},
doi = {10.1145/3287921.3287971},
abstract = {Malware (or malicious software) is any program or file that brings harm to a computer system. Malware includes computer viruses, worms, trojan horses, rootkit, adware, ransomware and spyware. Due to the explosive growth in number and variety of malware, the demand of improving automatic malware detection has increased. Machine learning approaches are a natural choice to deal with this problem since they can automatically discover hidden patterns in large-scale datasets to distinguish malware from benign. In this paper, we propose different deep neural network architectures from simple to advanced ones. We then fuse hand-crafted and deep features, and combine all models together to make an overall effective ensemble framework for malware detection. The experiment results demonstrate the efficiency of our proposed method, which is capable to detect malware with accuracy of 96.24% on our large real-life dataset.},
booktitle = {Proceedings of the Ninth International Symposium on Information and Communication Technology},
pages = {192–199},
numpages = {8},
keywords = {Residual Convolutional Neural Network, Malware Detection, Ensemble Method},
location = {Danang City, Viet Nam},
series = {SoICT 2018}
}


@article{10.1145/3365001,
author = {Afianian, Amir and Niksefat, Salman and Sadeghiyan, Babak and Baptiste, David},
title = {Malware Dynamic Analysis Evasion Techniques: A Survey},
year = {2019},
issue_date = {January 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {6},
issn = {0360-0300},
url = {https://doi.org/10.1145/3365001},
doi = {10.1145/3365001},
abstract = {The cyber world is plagued with ever-evolving malware that readily infiltrate all defense mechanisms, operate viciously unbeknownst to the user, and surreptitiously exfiltrate sensitive data. Understanding the inner workings of such malware provides a leverage to effectively combat them. This understanding is pursued often through dynamic analysis which is conducted manually or automatically. Malware authors accordingly, have devised and advanced evasion techniques to thwart or evade these analyses. In this article, we present a comprehensive survey on malware dynamic analysis evasion techniques. In addition, we propose a detailed classification of these techniques and further demonstrate how their efficacy holds against different types of detection and analysis approaches.Our observations attest that evasive behavior is mostly concerned with detecting and evading sandboxes. The primary tactic of such malware we argue is fingerprinting followed by new trends for reverse Turing test tactic which aims at detecting human interaction. Furthermore, we will posit that the current defensive strategies, beginning with reactive methods to endeavors for more transparent analysis systems, are readily foiled by zero-day fingerprinting techniques or other evasion tactics such as stalling. Accordingly, we would recommend the pursuit of more generic defensive strategies with an emphasis on path exploration techniques that has the potential to thwart all the evasive tactics.},
journal = {ACM Comput. Surv.},
month = nov,
articleno = {126},
numpages = {28},
keywords = {sandbox evasion, Malware, evasion techniques, anti-debugging}
}


@inproceedings{10.1145/3331076.3331111,
author = {Kadri, Mohamad Al and Nassar, Mohamed and Safa, Haidar},
title = {Transfer Learning for Malware Multi-Classification},
year = {2019},
isbn = {9781450362498},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3331076.3331111},
doi = {10.1145/3331076.3331111},
abstract = {In this paper, we build on top of the MalConv neural networks learning architecture which was initially designed for malware/benign classification. We evaluate the transfer learning of MalConv for malware multi-class classification by extending its contribution in several directions: (1) We assess MalConv performance on a multi-classification problem using a new dataset composed of solely malware samples belonging to different malware families, (2) we evaluate MalConv on the raw bytes data as well as on the opcodes extracted from the reversed assembly samples and compare the results, (3) we validate the MalConv findings about regularization, and (4) we study MalConv performance when using a medium size dataset and limited computational resources and GPU. The obtained results show that MalConv performs equally well for multi-classification and its performance on raw byte sequences is comparable to opcodes sequences. DeCov regularization is shown to improve the accuracy results better than other regularization techniques.},
booktitle = {Proceedings of the 23rd International Database Applications &amp; Engineering Symposium},
articleno = {19},
numpages = {7},
keywords = {regularization, deep learning, transfer learning, malware, classification},
location = {Athens, Greece},
series = {IDEAS '19}
}


@inproceedings{10.1145/3290480.3290494,
author = {Wu, Cangshuai and Shi, Jiangyong and Yang, Yuexiang and Li, Wenhua},
title = {Enhancing Machine Learning Based Malware Detection Model by Reinforcement Learning},
year = {2018},
isbn = {9781450365673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3290480.3290494},
doi = {10.1145/3290480.3290494},
abstract = {Malware detection is getting more and more attention due to the rapid growth of new malware. As a result, machine learning (ML) has become a popular way to detect malware variants. However, machine learning models can also be cheated. Through reinforcement learning (RL), we can generate new malware samples which can bypass the detection of machine learning. In this paper, a RL model on malware generation named gym-plus is designed. Gym-plus is built based on gym-malware with some improvements. As a result, the probability of evading machine learning based static PE malware detection models is increased by 30%. Based on these newly generated samples, we retrain our detecting model to detect unknown threats. In our test, the detection accuracy of malware increased from 15.75% to 93.5%.},
booktitle = {Proceedings of the 8th International Conference on Communication and Network Security},
pages = {74–78},
numpages = {5},
keywords = {reinforcement learning, malware evasion, static analysis, machine learning},
location = {Qingdao, China},
series = {ICCNS 2018}
}


@inproceedings{10.1145/2480362.2480401,
author = {Kim, Jinhyun and Moon, Byung-Ro},
title = {Disguised Malware Script Detection System Using Hybrid Genetic Algorithm},
year = {2013},
isbn = {9781450316569},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2480362.2480401},
doi = {10.1145/2480362.2480401},
abstract = {Malicious software, or malware for short, is one of the most serious threats to computer systems. There are various disguise techniques that hide malware from being detected, and these techniques are becoming more sophisticated. Traditional signature-based detection systems often can not cope with disguised malware timely. In this paper, we propose a new approach to detect disguised malware scripts. The proposed system consists of a metric-based detection algorithm and a hybrid genetic algorithm. We use the frequencies of token occurrences as a metric, and separate identifiers from other program tokens. The genetic algorithm tries further detection by extracting the main core of a program. Experimental tests showed that the proposed system successfully detected a number of newly generated malware scripts which existing anti-viruses missed more than half of. The system would be suitable for an offline malware detection which requires high quality.},
booktitle = {Proceedings of the 28th Annual ACM Symposium on Applied Computing},
pages = {182–187},
numpages = {6},
keywords = {malware detection, hybrid genetic algorithm, malware disguise techniques, metric-based method},
location = {Coimbra, Portugal},
series = {SAC '13}
}


@inproceedings{10.1145/2960811.2967174,
author = {Nicholas, Charles and Brandon, Robert},
title = {Document Engineering Issues in Malware Analysis},
year = {2016},
isbn = {9781450344388},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2960811.2967174},
doi = {10.1145/2960811.2967174},
abstract = {We present an overview of the field of malware analysis with emphasis on issues related to document engineering. We will introduce the field with a discussion of the types of malware, including executable binaries, malicious PDFs, polymorphic malware, ransomware, and exploit kits. We will conclude with our view of important research questions in the field. This is an updated version of last year's tutorial, with more information about web-based malware and malware targeting the Android market.},
booktitle = {Proceedings of the 2016 ACM Symposium on Document Engineering},
pages = {3},
numpages = {1},
keywords = {malware analysis, document engineering},
location = {Vienna, Austria},
series = {DocEng '16}
}


@inproceedings{10.1145/3230833.3230835,
author = {Sewak, Mohit and Sahay, Sanjay K. and Rathore, Hemant},
title = {An Investigation of a Deep Learning Based Malware Detection System},
year = {2018},
isbn = {9781450364485},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3230833.3230835},
doi = {10.1145/3230833.3230835},
abstract = {We investigate a Deep Learning based system for malware detection. In the investigation, we experiment with different combination of Deep Learning architectures including Auto-Encoders, and Deep Neural Networks with varying layers over Malicia malware dataset on which earlier studies have obtained an accuracy of (98%) with an acceptable False Positive Rates (1.07%). But these results were done using extensive man-made custom domain features and investing corresponding feature engineering and design efforts. In our proposed approach, besides improving the previous best results (99.21% accuracy and an False Positive Rate of 0.19%) indicates that Deep Learning based systems could deliver an effective defense against malware. Since it is good in automatically extracting higher conceptual features from the data, Deep Learning based systems could provide an effective, general and scalable mechanism for detection of existing and unknown malware.},
booktitle = {Proceedings of the 13th International Conference on Availability, Reliability and Security},
articleno = {26},
numpages = {5},
keywords = {Malware, Deep Learning, Malicia, Cyber Security, Machine Learning, Auto Encoders, Deep Neural Networks},
location = {Hamburg, Germany},
series = {ARES 2018}
}


@inproceedings{10.1145/3371676.3371685,
author = {Zhang, Jianing and Zhuang, Xingtao and Chen, Yunfang},
title = {Android Malware Detection Combined with Static and Dynamic Analysis},
year = {2019},
isbn = {9781450376624},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3371676.3371685},
doi = {10.1145/3371676.3371685},
abstract = {Android System has attracted not only constantly increasing number of smart device users, but also the serious attacks from explosive malicious apps. Consequently, the need to effectively detect Android malware is becoming more and more urgent. In the paper, combing the advantages of static analysis and dynamic analysis, we propose an Android malware detection method based on machine classification. Our experimental results show that the accuracy of the approach meets the requirements of Android malware detection. Subsequently, we apply this approach to perform an interesting detection on the popular apps of different user crowds, and provide some corresponding security advices.},
booktitle = {Proceedings of the 2019 the 9th International Conference on Communication and Network Security},
pages = {6–10},
numpages = {5},
keywords = {Android, Dynamic Analysis, Static Analysis, Malware Detection},
location = {Chongqing, China},
series = {ICCNS 2019}
}


@inproceedings{10.1145/3318216.3363379,
author = {Choi, Jinchun and Anwar, Afsah and Alasmary, Hisham and Spaulding, Jeffrey and Nyang, DaeHun and Mohaisen, Aziz},
title = {IoT Malware Ecosystem in the Wild: A Glimpse into Analysis and Exposures},
year = {2019},
isbn = {9781450367332},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3318216.3363379},
doi = {10.1145/3318216.3363379},
abstract = {The lack of security measures among the Internet of Things (IoT) devices and their persistent online connection give adversaries a prime opportunity to target them or even abuse them as intermediary targets in larger attacks such as distributed denial-of-service (DDoS) campaigns. In this paper, we analyze IoT malware and focus on the endpoints reachable on the public Internet, and play an essential part in the IoT malware ecosystem. Namely, we analyze endpoints acting as dropzones and their targets to gain insights into the underlying dynamics in this ecosystem, such as the affinity between the dropzones and their target IP addresses, and the different patterns among endpoints. Towards this goal, we reverse-engineer 2,423 IoT malware samples and extract strings from them to obtain IP addresses. We further gather information about these endpoints from public Internet-wide scanners, such as Shodan and Censys. For the masked IP addresses, we examine the Classless Inter-Domain Routing (CIDR) networks accumulating to more than 100 million (≈78.2% of total active public IPv4 addresses) endpoints.},
booktitle = {Proceedings of the 4th ACM/IEEE Symposium on Edge Computing},
pages = {413–418},
numpages = {6},
keywords = {internet of things, endpoints, malware},
location = {Arlington, Virginia},
series = {SEC '19}
}


@inproceedings{10.1145/3318216.3363379,
author = {Choi, Jinchun and Anwar, Afsah and Alasmary, Hisham and Spaulding, Jeffrey and Nyang, DaeHun and Mohaisen, Aziz},
title = {IoT Malware Ecosystem in the Wild: A Glimpse into Analysis and Exposures},
year = {2019},
isbn = {9781450367332},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3318216.3363379},
doi = {10.1145/3318216.3363379},
abstract = {The lack of security measures among the Internet of Things (IoT) devices and their persistent online connection give adversaries a prime opportunity to target them or even abuse them as intermediary targets in larger attacks such as distributed denial-of-service (DDoS) campaigns. In this paper, we analyze IoT malware and focus on the endpoints reachable on the public Internet, and play an essential part in the IoT malware ecosystem. Namely, we analyze endpoints acting as dropzones and their targets to gain insights into the underlying dynamics in this ecosystem, such as the affinity between the dropzones and their target IP addresses, and the different patterns among endpoints. Towards this goal, we reverse-engineer 2,423 IoT malware samples and extract strings from them to obtain IP addresses. We further gather information about these endpoints from public Internet-wide scanners, such as Shodan and Censys. For the masked IP addresses, we examine the Classless Inter-Domain Routing (CIDR) networks accumulating to more than 100 million (≈78.2% of total active public IPv4 addresses) endpoints.},
booktitle = {Proceedings of the 4th ACM/IEEE Symposium on Edge Computing},
pages = {413–418},
numpages = {6},
keywords = {internet of things, endpoints, malware},
location = {Arlington, Virginia},
series = {SEC '19}
}


@article{10.1145/3377869,
author = {Burton, Ren\'{e}e},
title = {Unsupervised Learning Techniques for Malware Characterization: Understanding Certain DNS-Based DDoS Attacks},
year = {2020},
issue_date = {September 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {3},
issn = {2692-1626},
url = {https://doi.org/10.1145/3377869},
doi = {10.1145/3377869},
abstract = {This article details data science research in the area of Cyber Threat Intelligence applied to a specific type of Distributed Denial of Service (DDoS) attack. We study a DDoS technique prevalent in the Domain Name System (DNS) for which little malware have been recovered. Using data from a globally distributed set of a passive collectors (pDNS), we create a statistical classifier to identify these attacks and then use unsupervised learning to investigate the attack events and the malware that generates them. The first known major study of this technique, this work demonstrates that current attacks have little resemblance to earlier published descriptions and identifies several features of the attacks. Through a combination of text and time-series features, we are able to characterize the dominant malware and demonstrate that the number of global-scale attack systems is relatively small.},
journal = {Digital Threats: Research and Practice},
month = aug,
articleno = {14},
numpages = {26},
keywords = {malware, botnet, threat intelligence, data science, clustering, ddos attacks, Domain name service (DNS)}
}


@inproceedings{10.1145/3319619.3326811,
author = {Manavi, Farnoush and Hamzeh, Ali},
title = {A New Approach for Malware Detection Based on Evolutionary Algorithm},
year = {2019},
isbn = {9781450367486},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3319619.3326811},
doi = {10.1145/3319619.3326811},
abstract = {Malware is a malicious code which intends to harm computers and networks. Each year, a huge number of malicious programs are released. Therefore, detecting malware has become one of the most important challenges for the security of computer systems. Various methods have been defined for detecting and classifying malware, such as signature-based and heuristic-based techniques. This paper proposes a new malware detection method based on the operational codes (OpCodes) within an executable file by using the evolutionary algorithm. There are several steps in the proposed method, which includes disassembling the executable files, generating a graph of OpCodes and using the evolutionary algorithm to find the most similar graph to each suspicious instance. Finally, the label of each suspicious instance is detected based on the most similar graph obtained from the evolutionary algorithm with each class (family of malware and benign). The results show that, the proposed method can be used as a method for malware detection and malware category.},
booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference Companion},
pages = {1619–1624},
numpages = {6},
keywords = {classification, graph, evolutionary algorithm, OpCode, malware detection},
location = {Prague, Czech Republic},
series = {GECCO '19}
}


@inproceedings{10.1145/2485922.2485970,
author = {Demme, John and Maycock, Matthew and Schmitz, Jared and Tang, Adrian and Waksman, Adam and Sethumadhavan, Simha and Stolfo, Salvatore},
title = {On the Feasibility of Online Malware Detection with Performance Counters},
year = {2013},
isbn = {9781450320795},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2485922.2485970},
doi = {10.1145/2485922.2485970},
abstract = {The proliferation of computers in any domain is followed by the proliferation of malware in that domain. Systems, including the latest mobile platforms, are laden with viruses, rootkits, spyware, adware and other classes of malware. Despite the existence of anti-virus software, malware threats persist and are growing as there exist a myriad of ways to subvert anti-virus (AV) software. In fact, attackers today exploit bugs in the AV software to break into systems.In this paper, we examine the feasibility of building a malware detector in hardware using existing performance counters. We find that data from performance counters can be used to identify malware and that our detection techniques are robust to minor variations in malware programs. As a result, after examining a small set of variations within a family of malware on Android ARM and Intel Linux platforms, we can detect many variations within that family. Further, our proposed hardware modifications allow the malware detector to run securely beneath the system software, thus setting the stage for AV implementations that are simpler and less buggy than software AV. Combined, the robustness and security of hardware AV techniques have the potential to advance state-of-the-art online malware detection.},
booktitle = {Proceedings of the 40th Annual International Symposium on Computer Architecture},
pages = {559–570},
numpages = {12},
keywords = {malware and its mitigation, performance counters, malware detection, security in hardware, machine learning},
location = {Tel-Aviv, Israel},
series = {ISCA '13}
}

@article{10.1145/2508148.2485970,
author = {Demme, John and Maycock, Matthew and Schmitz, Jared and Tang, Adrian and Waksman, Adam and Sethumadhavan, Simha and Stolfo, Salvatore},
title = {On the Feasibility of Online Malware Detection with Performance Counters},
year = {2013},
issue_date = {June 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {3},
issn = {0163-5964},
url = {https://doi.org/10.1145/2508148.2485970},
doi = {10.1145/2508148.2485970},
abstract = {The proliferation of computers in any domain is followed by the proliferation of malware in that domain. Systems, including the latest mobile platforms, are laden with viruses, rootkits, spyware, adware and other classes of malware. Despite the existence of anti-virus software, malware threats persist and are growing as there exist a myriad of ways to subvert anti-virus (AV) software. In fact, attackers today exploit bugs in the AV software to break into systems.In this paper, we examine the feasibility of building a malware detector in hardware using existing performance counters. We find that data from performance counters can be used to identify malware and that our detection techniques are robust to minor variations in malware programs. As a result, after examining a small set of variations within a family of malware on Android ARM and Intel Linux platforms, we can detect many variations within that family. Further, our proposed hardware modifications allow the malware detector to run securely beneath the system software, thus setting the stage for AV implementations that are simpler and less buggy than software AV. Combined, the robustness and security of hardware AV techniques have the potential to advance state-of-the-art online malware detection.},
journal = {SIGARCH Comput. Archit. News},
month = jun,
pages = {559–570},
numpages = {12},
keywords = {malware and its mitigation, malware detection, performance counters, security in hardware, machine learning}
}


@inproceedings{10.1145/2811411.2811543,
author = {Cho, In Kyeom and Im, Eul Gyu},
title = {Extracting Representative API Patterns of Malware Families Using Multiple Sequence Alignments},
year = {2015},
isbn = {9781450337380},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2811411.2811543},
doi = {10.1145/2811411.2811543},
abstract = {Nowadays malware developers use various techniques to avoid detection of antivirus software. For variants of malware, existing signature based detection method could be avoidable because those have some differences in static information like code or strings. Therefore, to detect and classify malware variants, a behavior based detection is required. This paper proposes a technique to extract a representative API pattern from API call sequences of a malware family using multiple sequence alignment (MSA) algorithm to measure similarities among malware variants. To extract API call sequences of malware, a sandbox tool was used. After that, the Clustal algorithm, a popular MSA algorithm used in the Bioinformatics field, was applied to malware API call sequences, and the representative API pattern was extracted from the results of MSA. Experiments to test the extracted API patterns that are used to classify malware variants were carried out, and we measured classification accuracy of the representative API pattern of each family. The experimental results show that our proposed method can be effective to classify malware families.},
booktitle = {Proceedings of the 2015 Conference on Research in Adaptive and Convergent Systems},
pages = {308–313},
numpages = {6},
keywords = {malware classification, representative API pattern, multiple sequence alignment},
location = {Prague, Czech Republic},
series = {RACS}
}


@inproceedings{10.1145/3128572.3140442,
author = {Raff, Edward and Sylvester, Jared and Nicholas, Charles},
title = {Learning the PE Header, Malware Detection with Minimal Domain Knowledge},
year = {2017},
isbn = {9781450352024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3128572.3140442},
doi = {10.1145/3128572.3140442},
abstract = {Many efforts have been made to use various forms of domain knowledge in malware detection. Currently there exist two common approaches to malware detection without domain knowledge, namely byte n-grams and strings. In this work we explore the feasibility of applying neural networks to malware detection and feature learning. We do this by restricting ourselves to a minimal amount of domain knowledge in order to extract a portion of the Portable Executable (PE) header. By doing this we show that neural networks can learn from raw bytes without explicit feature construction, and perform even better than a domain knowledge approach that parses the PE header into explicit features.},
booktitle = {Proceedings of the 10th ACM Workshop on Artificial Intelligence and Security},
pages = {121–132},
numpages = {12},
keywords = {deep learning, cyber security, malware detection},
location = {Dallas, Texas, USA},
series = {AISec '17}
}


@inproceedings{10.1145/3139367.3139400,
author = {Kosmidis, Konstantinos and Kalloniatis, Christos},
title = {Machine Learning and Images for Malware Detection and Classification},
year = {2017},
isbn = {9781450353557},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3139367.3139400},
doi = {10.1145/3139367.3139400},
abstract = {Detecting malicious code with exact match on collected datasets is becoming a large-scale identification problem due to the existence of new malware variants. Being able to promptly and accurately identify new attacks enables security experts to respond effectively.My proposal is to develop an automated framework for identification of unknown vulnerabilities by leveraging current neural network techniques. This has a significant and immediate value for the security field, as current anti-virus software is typically able to recognize the malware type only after its infection, and preventive measures are limited.Artificial Intelligence plays a major role in automatic malware classification: numerous machine-learning methods, both supervised and unsupervised, have been researched to try classifying malware into families based on features acquired by static and dynamic analysis.The value of automated identification is clear, as feature engineering is both a time-consuming and time-sensitive task, with new malware studied while being observed in the wild.},
booktitle = {Proceedings of the 21st Pan-Hellenic Conference on Informatics},
articleno = {5},
numpages = {6},
keywords = {malware detection, classification, image processing, clustering, computer vision, machine learning, Malware analysis},
location = {Larissa, Greece},
series = {PCI 2017}
}


@inproceedings{10.1145/3330204.3330229,
author = {Pinto, Dhiego Ramos and Duarte, Julio Cesar and Sant'Ana, Ricardo},
title = {A Deep Learning Approach to the Malware Classification Problem Using Autoencoders},
year = {2019},
isbn = {9781450372374},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3330204.3330229},
doi = {10.1145/3330204.3330229},
abstract = {Detecting malicious code or categorizing it among families has become an increasingly difficult task. Malware1 exploits vulnerabilities and employ sophisticated techniques to avoid their detection and further classification, challenging cybersecurity teams, governments, enterprises, and the ordinary user, causing uncountable losses annually.Traditional machine learning algorithms have been used to attack the problem, although, these methods are heavily relying on domain expertise to be successful. Deep Learning methods requires less dependency on feature engineering, discovering the important features straightly from the raw data, recognizing patterns that humans usually can't.This work presents a deep learning approach for malware multi-class classification based on an unsupervised pre-trained classifier, using opcodes and its operands frequencies as raw data, ignoring knowledge that could be acquired from any known features from the malware families. The results confirmed that the approach is well succeeded and our best model achieved a MacroF1 of 93.14% a competitive result comparing to best-known classifier, since it uses less information about the malware.},
booktitle = {Proceedings of the XV Brazilian Symposium on Information Systems},
articleno = {20},
numpages = {8},
keywords = {Machine Learning, Static Analysis, Neural Networks, Deep Learning, Malware Classification, Autoencoder, Unsupervised Pre-training},
location = {Aracaju, Brazil},
series = {SBSI'19}
}


@inproceedings{10.1145/2872518.2888609,
author = {Marschalek, Stefan and Kaiser, Manfred and Luh, Robert and Schrittwieser, Sebastian},
title = {Empirical Malware Research through Observation of System Behaviour},
year = {2016},
isbn = {9781450341448},
publisher = {International World Wide Web Conferences Steering Committee},
address = {Republic and Canton of Geneva, CHE},
url = {https://doi.org/10.1145/2872518.2888609},
doi = {10.1145/2872518.2888609},
abstract = {Behavioural analysis has become an important method of today's malware research. Malicious software is executed inside a controlled environment where its runtime behaviour can be studied. Recently, we proposed the concept of not only observing individual executables but a computer system as a whole. The basic idea is to identify malware by detecting anomalies in the way a system behaves. In this paper we discuss our methodology for empirical malware research and highlight its strengths and limitations. Furthermore, we explain the challenges we faced during our research and describe our lessons learned.},
booktitle = {Proceedings of the 25th International Conference Companion on World Wide Web},
pages = {467–469},
numpages = {3},
keywords = {malware, security, system bahaviour},
location = {Montr\'{e}al, Qu\'{e}bec, Canada},
series = {WWW '16 Companion}
}


@inproceedings{10.1145/3128572.3140446,
author = {Raff, Edward and Nicholas, Charles},
title = {Malware Classification and Class Imbalance via Stochastic Hashed LZJD},
year = {2017},
isbn = {9781450352024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3128572.3140446},
doi = {10.1145/3128572.3140446},
abstract = {There are currently few methods that can be applied to malware classification problems which don't require domain knowledge to apply. In this work, we develop our new SHWeL feature vector representation, by extending the recently proposed Lempel-Ziv Jaccard Distance. These SHWeL vectors improve upon LZJD's accuracy, outperform byte n-grams, and allow us to build efficient algorithms for both training (a weakness of byte n-grams) and inference (a weakness of LZJD). Furthermore, our new SHWeL method also allows us to directly tackle the class imbalance problem, which is common for malware-related tasks. Compared to existing methods like SMOTE, SHWeL provides significantly improved accuracy while reducing algorithmic complexity to O(N). Because our approach is developed without the use of domain knowledge, it can be easily re-applied to any new domain where there is a need to classify byte sequences.},
booktitle = {Proceedings of the 10th ACM Workshop on Artificial Intelligence and Security},
pages = {111–120},
numpages = {10},
keywords = {shwel, malware classification, lzjd, cyber security},
location = {Dallas, Texas, USA},
series = {AISec '17}
}


@inproceedings{10.1145/1774088.1774303,
author = {Sami, Ashkan and Yadegari, Babak and Rahimi, Hossein and Peiravian, Naser and Hashemi, Sattar and Hamze, Ali},
title = {Malware Detection Based on Mining API Calls},
year = {2010},
isbn = {9781605586397},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1774088.1774303},
doi = {10.1145/1774088.1774303},
abstract = {Financial loss due to malware nearly doubles every two years. For instance in 2006, malware caused near 33.5 Million GBP direct financial losses only to member organizations of banks in UK. Recent malware cannot be detected by traditional signature based anti-malware tools due to their polymorphic and/or metamorphic nature. Malware detection based on its immutable characteristics has been a recent industrial practice. The datasets are not public. Thus the results are not reproducible and conducting research in academic setting is difficult. In this work, we not only have improved a recent method of malware detection based on mining Application Programming Interface (API) calls significantly, but also have created the first public dataset to promote malware research.Our technique first reads API call sets used in a collection of Portable Executable (PE) files, then generates a set of discriminative and domain interpretable features. These features are then used to train a classifier to detect unseen malware. We have achieved detection rate of 99.7% while keeping accuracy as high as 98.3%. Our method improved state of the art technology in several aspects: accuracy by 5.24%, detection rate by 2.51% and false alarm rate was decreased from 19.86% to 1.51%. This project's data and source code can be found at http://home.shirazu.ac.ir/~sami/malware.},
booktitle = {Proceedings of the 2010 ACM Symposium on Applied Computing},
pages = {1020–1025},
numpages = {6},
keywords = {public dataset, frequent pattern mining, portable executable (PE), polymorphic/metamorphic malware, malware detection, API call},
location = {Sierre, Switzerland},
series = {SAC '10}
}


@inproceedings{10.1145/2875475.2875481,
author = {Canfora, Gerardo and Medvet, Eric and Mercaldo, Francesco and Visaggio, Corrado Aaron},
title = {Acquiring and Analyzing App Metrics for Effective Mobile Malware Detection},
year = {2016},
isbn = {9781450340779},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2875475.2875481},
doi = {10.1145/2875475.2875481},
abstract = {Android malware is becoming very effective in evading detection techniques, and traditional malware detection techniques are demonstrating their weaknesses. Signature based detection shows at least two drawbacks: first, the detection is possible only after the malware has been identified, and the time needed to produce and distribute the signature provides attackers with window of opportunities for spreading the malware in the wild. For solving this problem, different approaches that try to characterize the malicious behavior through the invoked system and API calls emerged. Unfortunately, several evasion techniques have proven effective to evade detection based on system and API calls.In this paper, we propose an approach for capturing the malicious behavior in terms of device resource consumption (using a thorough set of features), which is much more difficult to camouflage. We describe a procedure, and the corresponding practical setting, for extracting those features with the aim of maximizing their discriminative power. Finally, we describe the promising results we obtained experimenting on more than 2000 applications, on which our approach exhibited an accuracy greater than 99%.},
booktitle = {Proceedings of the 2016 ACM on International Workshop on Security And Privacy Analytics},
pages = {50–57},
numpages = {8},
keywords = {malware android machine learning},
location = {New Orleans, Louisiana, USA},
series = {IWSPA '16}
}


@inproceedings{10.1145/3241539.3267768,
author = {Arora, Anshul and Peddoju, Sateesh K. and Chouhan, Vikas and Chaudhary, Ajay},
title = {Hybrid Android Malware Detection by Combining Supervised and Unsupervised Learning},
year = {2018},
isbn = {9781450359030},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3241539.3267768},
doi = {10.1145/3241539.3267768},
abstract = {Permissions and the network traffic features are the widely used attributes in static and dynamic Android malware detection respectively. However, static permissions cannot detect stealthy malware with update attacks capability, while dynamic network traffic cannot detect the malware samples without network connectivity. Hence, there is a need to build a hybrid model combining both these attributes. In this work, we propose a hybrid malware detector that examines both the permissions and the traffic features to detect malicious Android samples. The proposed approach is based on the combination of Supervised Learning (KNN Algorithm) and Unsupervised Learning (K-Medoids Algorithm). Experimental results demonstrate that hybrid approach gives the overall detection accuracy of 91.98%, better than static and dynamic detection accuracies of 71.46% and 81.13% respectively.},
booktitle = {Proceedings of the 24th Annual International Conference on Mobile Computing and Networking},
pages = {798–800},
numpages = {3},
keywords = {supervised learning, hybrid detection, android security, android malware, unsupervised learning},
location = {New Delhi, India},
series = {MobiCom '18}
}


@inproceedings{10.1145/3241539.3267768,
author = {Arora, Anshul and Peddoju, Sateesh K. and Chouhan, Vikas and Chaudhary, Ajay},
title = {Hybrid Android Malware Detection by Combining Supervised and Unsupervised Learning},
year = {2018},
isbn = {9781450359030},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3241539.3267768},
doi = {10.1145/3241539.3267768},
abstract = {Permissions and the network traffic features are the widely used attributes in static and dynamic Android malware detection respectively. However, static permissions cannot detect stealthy malware with update attacks capability, while dynamic network traffic cannot detect the malware samples without network connectivity. Hence, there is a need to build a hybrid model combining both these attributes. In this work, we propose a hybrid malware detector that examines both the permissions and the traffic features to detect malicious Android samples. The proposed approach is based on the combination of Supervised Learning (KNN Algorithm) and Unsupervised Learning (K-Medoids Algorithm). Experimental results demonstrate that hybrid approach gives the overall detection accuracy of 91.98%, better than static and dynamic detection accuracies of 71.46% and 81.13% respectively.},
booktitle = {Proceedings of the 24th Annual International Conference on Mobile Computing and Networking},
pages = {798–800},
numpages = {3},
keywords = {supervised learning, hybrid detection, android security, android malware, unsupervised learning},
location = {New Delhi, India},
series = {MobiCom '18}
}


@article{10.1145/3351881,
author = {Alaeiyan, Mohammadhadi and Dehghantanha, Ali and Dargahi, Tooska and Conti, Mauro and Parsa, Saeed},
title = {A Multilabel Fuzzy Relevance Clustering System for Malware Attack Attribution in the Edge Layer of Cyber-Physical Networks},
year = {2020},
issue_date = {May 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {3},
issn = {2378-962X},
url = {https://doi.org/10.1145/3351881},
doi = {10.1145/3351881},
abstract = {The rapid increase in the number of malicious programs has made malware forensics a daunting task and caused users’ systems to become in danger. Timely identification of malware characteristics including its origin and the malware sample family would significantly limit the potential damage of malware. This is a more profound risk in Cyber-Physical Systems (CPSs), where a malware attack may cause significant physical damage to the infrastructure. Due to limited on-device available memory and processing power in CPS devices, most of the efforts for protecting CPS networks are focused on the edge layer, where the majority of security mechanisms are deployed.Since the majority of advanced and sophisticated malware programs are combining features from different families, these malicious programs are not similar enough to any existing malware family and easily evade binary classifier detection. Therefore, in this article, we propose a novel multilabel fuzzy clustering system for malware attack attribution. Our system is deployed on the edge layer to provide insight into applicable malware threats to the CPS network. We leverage static analysis by utilizing Opcode frequencies as the feature space to classify malware families.We observed that a multilabel classifier does not classify a part of samples. We named this problem the instance coverage problem. To overcome this problem, we developed an ensemble-based multilabel fuzzy classification method to suggest the relevance of a malware instance to the stricken families. This classifier identified samples of VirusShare, RansomwareTracker, and BIG2015 with an accuracy of 94.66%, 94.26%, and 97.56%, respectively.},
journal = {ACM Trans. Cyber-Phys. Syst.},
month = mar,
articleno = {31},
numpages = {22},
keywords = {IoT, fuzzy classification, cyber-physical systems, instance coverage, CPS, malware classification, Edge layer, Internet of Things}
}


@inproceedings{10.1145/2664243.2664252,
author = {Lengyel, Tamas K. and Maresca, Steve and Payne, Bryan D. and Webster, George D. and Vogl, Sebastian and Kiayias, Aggelos},
title = {Scalability, Fidelity and Stealth in the DRAKVUF Dynamic Malware Analysis System},
year = {2014},
isbn = {9781450330053},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2664243.2664252},
doi = {10.1145/2664243.2664252},
abstract = {Malware is one of the biggest security threats on the Internet today and deploying effective defensive solutions requires the rapid analysis of a continuously increasing number of malware samples. With the proliferation of metamorphic malware the analysis is further complicated as the efficacy of signature-based static analysis systems is greatly reduced. While dynamic malware analysis is an effective alternative, the approach faces significant challenges as the ever increasing number of samples requiring analysis places a burden on hardware resources. At the same time modern malware can both detect the monitoring environment and hide in unmonitored corners of the system.In this paper we present DRAKVUF, a novel dynamic malware analysis system designed to address these challenges by building on the latest hardware virtualization extensions and the Xen hypervisor. We present a technique for improving stealth by initiating the execution of malware samples without leaving any trace in the analysis machine. We also present novel techniques to eliminate blind-spots created by kernel-mode rootkits by extending the scope of monitoring to include kernel internal functions, and to monitor file-system accesses through the kernel's heap allocations. With extensive tests performed on recent malware samples we show that DRAKVUF achieves significant improvements in conserving hardware resources while providing a stealthy, in-depth view into the behavior of modern malware.},
booktitle = {Proceedings of the 30th Annual Computer Security Applications Conference},
pages = {386–395},
numpages = {10},
keywords = {virtual machine introspection, dynamic malware analysis},
location = {New Orleans, Louisiana, USA},
series = {ACSAC '14}
}


@inproceedings{10.1145/3029806.3029823,
author = {McLaughlin, Niall and Martinez del Rincon, Jesus and Kang, BooJoong and Yerima, Suleiman and Miller, Paul and Sezer, Sakir and Safaei, Yeganeh and Trickel, Erik and Zhao, Ziming and Doup\'{e}, Adam and Joon Ahn, Gail},
title = {Deep Android Malware Detection},
year = {2017},
isbn = {9781450345231},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3029806.3029823},
doi = {10.1145/3029806.3029823},
abstract = {In this paper, we propose a novel android malware detection system that uses a deep convolutional neural network (CNN). Malware classification is performed based on static analysis of the raw opcode sequence from a disassembled program. Features indicative of malware are automatically learned by the network from the raw opcode sequence thus removing the need for hand-engineered malware features. The training pipeline of our proposed system is much simpler than existing n-gram based malware detection methods, as the network is trained end-to-end to jointly learn appropriate features and to perform classification, thus removing the need to explicitly enumerate millions of n-grams during training. The network design also allows the use of long n-gram like features, not computationally feasible with existing methods. Once trained, the network can be efficiently executed on a GPU, allowing a very large number of files to be scanned quickly.},
booktitle = {Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy},
pages = {301–308},
numpages = {8},
keywords = {malware detection, deep learning, android},
location = {Scottsdale, Arizona, USA},
series = {CODASPY '17}
}


@article{10.1145/1698750.1698752,
author = {Jiang, Xuxian and Wang, Xinyuan and Xu, Dongyan},
title = {Stealthy Malware Detection and Monitoring through VMM-Based “out-of-the-Box” Semantic View Reconstruction},
year = {2010},
issue_date = {February 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2},
issn = {1094-9224},
url = {https://doi.org/10.1145/1698750.1698752},
doi = {10.1145/1698750.1698752},
abstract = {An alarming trend in recent malware incidents is that they are armed with stealthy techniques to detect, evade, and subvert malware detection facilities of the victim. On the defensive side, a fundamental limitation of traditional host-based antimalware systems is that they run inside the very hosts they are protecting (“in-the-box”), making them vulnerable to counter detection and subversion by malware. To address this limitation, recent solutions based on virtual machine (VM) technologies advocate placing the malware detection facilities outside of the protected VM (“out-of-the-box”). However, they gain tamper resistance at the cost of losing the internal semantic view of the host, which is enjoyed by “in-the-box” approaches. This poses a technical challenge known as the semantic gap.In this article, we present the design, implementation, and evaluation of VMwatcher—an “out-of-the-box” approach that overcomes the semantic gap challenge. A new technique called guest view casting is developed to reconstruct internal semantic views (e.g., files, processes, and kernel modules) of a VM nonintrusively from the outside. More specifically, the new technique casts semantic definitions of guest OS data structures and functions on virtual machine monitor (VMM)-level VM states, so that the semantic view can be reconstructed. Furthermore, we extend guest view casting to reconstruct details of system call events (e.g., the process that makes the system call as well as the system call number, parameters, and return value) in the VM, enriching the semantic view. With the semantic gap effectively narrowed, we identify three unique malware detection and monitoring capabilities: (i) view comparison-based malware detection and its demonstration in rootkit detection; (ii) “out-of-the-box” deployment of off-the-shelf anti malware software with improved detection accuracy and tamper-resistance; and (iii) nonintrusive system call monitoring for malware and intrusion behavior observation. We have implemented a proof-of-concept VMwatcher prototype on a number of VMM platforms. Our evaluation experiments with real-world malware, including elusive kernel-level rootkits, demonstrate VMwatcher's practicality and effectiveness.},
journal = {ACM Trans. Inf. Syst. Secur.},
month = mar,
articleno = {12},
numpages = {28},
keywords = {Malware detection, rootkits, virtual machines}
}


@inproceedings{10.1145/1835804.1835820,
author = {Ye, Yanfang and Li, Tao and Chen, Yong and Jiang, Qingshan},
title = {Automatic Malware Categorization Using Cluster Ensemble},
year = {2010},
isbn = {9781450300551},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1835804.1835820},
doi = {10.1145/1835804.1835820},
abstract = {In this paper, resting on the analysis of instruction frequency and function-based instruction sequences, we develop an Automatic Malware Categorization System (AMCS) for automatically grouping malware samples into families that share some common characteristics using a cluster ensemble by aggregating the clustering solutions generated by different base clustering algorithms. We propose a principled cluster ensemble framework for combining individual clustering solutions based on the consensus partition. The domain knowledge in the form of sample-level constraints can be naturally incorporated in the ensemble framework. In addition, to account for the characteristics of feature representations, we propose a hybrid hierarchical clustering algorithm which combines the merits of hierarchical clustering and k-medoids algorithms and a weighted subspace K-medoids algorithm to generate base clusterings. The categorization results of our AMCS system can be used to generate signatures for malware families that are useful for malware detection. The case studies on large and real daily malware collection from Kingsoft Anti-Virus Lab demonstrate the effectiveness and efficiency of our AMCS system.},
booktitle = {Proceedings of the 16th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining},
pages = {95–104},
numpages = {10},
keywords = {signature, malware categorization, cluster ensemble},
location = {Washington, DC, USA},
series = {KDD '10}
}


@inproceedings{10.1145/2660267.2660330,
author = {Yen, Ting-Fang and Heorhiadi, Victor and Oprea, Alina and Reiter, Michael K. and Juels, Ari},
title = {An Epidemiological Study of Malware Encounters in a Large Enterprise},
year = {2014},
isbn = {9781450329576},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2660267.2660330},
doi = {10.1145/2660267.2660330},
abstract = {We present an epidemiological study of malware encounters in a large, multi-national enterprise. Our data sets allow us to observe or infer not only malware presence on enterprise computers, but also malware entry points, network locations of the computers (i.e., inside the enterprise network or outside) when the malware were encountered, and for some web-based malware encounters, web activities that gave rise to them. By coupling this data with demographic information for each host's primary user, such as his or her job title and level in the management hierarchy, we are able to paint a reasonably comprehensive picture of malware encounters for this enterprise. We use this analysis to build a logistic regression model for inferring the risk of hosts encountering malware; those ranked highly by our model have a &gt;3x higher rate of encountering malware than the base rate. We also discuss where our study confirms or refutes other studies and guidance that our results suggest.},
booktitle = {Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security},
pages = {1117–1130},
numpages = {14},
keywords = {malware encounters, enterprise security, measurement, logistic regression},
location = {Scottsdale, Arizona, USA},
series = {CCS '14}
}


@inproceedings{10.1145/1774088.1774484,
author = {Bayer, Ulrich and Kirda, Engin and Kruegel, Christopher},
title = {Improving the Efficiency of Dynamic Malware Analysis},
year = {2010},
isbn = {9781605586397},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1774088.1774484},
doi = {10.1145/1774088.1774484},
abstract = {Each day, security companies see themselves confronted with thousands of new malware programs. To cope with these large quantities, researchers and practitioners alike have developed dynamic malware analysis systems. These systems automatically execute a program in a controlled environment and produce a report describing the program's behavior. During the last three years, the number of malware programs appearing each day has increased by a factor of ten, and this number is expected to continue to grow. To keep pace with these developments without causing even more hardware costs for operating dynamic analysis systems, we have developed a technique that drastically reduces the overall analysis time. Our solution is based on the insight that the huge number of new malicious files is due to mutations of only a few malware programs. To save analysis time, we suggest a technique that avoids performing a full analysis of the same polymorphic file multiple times. In an experiment conducted on a set of 10,922 randomly chosen executable files, our prototype implementation was able to avoid a full dynamic analysis in 25.25 percent of the cases.},
booktitle = {Proceedings of the 2010 ACM Symposium on Applied Computing},
pages = {1871–1878},
numpages = {8},
keywords = {malware analysis, dynamic analysis},
location = {Sierre, Switzerland},
series = {SAC '10}
}


@inproceedings{10.1145/1557019.1557167,
author = {Ye, Yanfang and Li, Tao and Jiang, Qingshan and Han, Zhixue and Wan, Li},
title = {Intelligent File Scoring System for Malware Detection from the Gray List},
year = {2009},
isbn = {9781605584959},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1557019.1557167},
doi = {10.1145/1557019.1557167},
abstract = {Currently, the most significant line of defense against malware is anti-virus products which focus on authenticating valid software from a white list, blocking invalid software from a black list, and running any unknown software (i.e., the gray list) in a controlled manner. The gray list, containing unknown software programs which could be either normal or malicious, is usually authenticated or rejected manually by virus analysts. Unfortunately, along with the development of the malware writing techniques, the number of file samples in the gray list that need to be analyzed by virus analysts on a daily basis is constantly increasing. In this paper, we develop an intelligent file scoring system (IFSS for short) for malware detection from the gray list by an ensemble of heterogeneous base-level classifiers derived by different learning methods, using different feature representations on dynamic training sets. To the best of our knowledge, this is the first work of applying such ensemble methods for malware detection. IFSS makes it practical for virus analysts to identify malware samples from the huge gray list and improves the detection ability of anti-virus software. It has already been incorporated into the scanning tool of Kingsoft's Anti-Virus software. The case studies on large and real daily collection of the gray list illustrate that the detection ability and efficiency of our IFSS system outperforms other popular scanning tools such as NOD32 and Kaspersky.},
booktitle = {Proceedings of the 15th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining},
pages = {1385–1394},
numpages = {10},
keywords = {malware detection, gray list, ensemble},
location = {Paris, France},
series = {KDD '09}
}