@inproceedings{10.1145/3368756.3369098,
author = {Ikram, Ben Abdel Ouahab and Mohammed, Bouhorma and Abdelhakim, Boudhir Anouar and Lotfi, El Aachak and Zafar, Bassam},
title = {Machine Learning Application for Malwares Classification Using Visualization Technique},
year = {2019},
isbn = {9781450362894},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368756.3369098},
doi = {10.1145/3368756.3369098},
abstract = {Nowadays attackers work hard to develop efficient cyberthreats and exploit new techniques. So defenders need to use advanced methodologies to combat the latest threats and safely remove them from computers, mobiles and connected devices. Without the intelligent techniques, these devices would be at increased risk of damage from malicious programs. Recently a novel approach of processing malwares was appeared; it passes from malware binaries into malware images. Researchers found similarities in malwares images by extracting specific features. This paper presents malwares classifier using KNN and malware visualization technique. We used a database of 9339 samples of malwares from 25 families. We calculated the GIST descriptor for grayscale malware images. Then a KNN model was trained and evaluated many times to reach a score of 97%, which is very close to results found on literature.},
booktitle = {Proceedings of the 4th International Conference on Smart City Applications},
articleno = {110},
numpages = {6},
keywords = {malwares classification, cybersecurity, machine learning and KNN, malware visualization technique},
location = {Casablanca, Morocco},
series = {SCA '19}
}


@inproceedings{10.1145/2967360.2967367,
author = {Song, Linhai and Huang, Heqing and Zhou, Wu and Wu, Wenfei and Zhang, Yiying},
title = {Learning from Big Malwares},
year = {2016},
isbn = {9781450342650},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2967360.2967367},
doi = {10.1145/2967360.2967367},
abstract = {This paper calls for the attention to investigate real-world malwares in large scales by examining the largest real malware repository, VirusTotal. As a first step, we analyzed two fundamental characteristics of Windows executable malwares from VirusTotal. We designed offline and online tools for this analysis. Our results show that malwares appear in bursts and that distributions of malwares are highly skewed.},
booktitle = {Proceedings of the 7th ACM SIGOPS Asia-Pacific Workshop on Systems},
articleno = {12},
numpages = {8},
location = {Hong Kong, Hong Kong},
series = {APSys '16}
}


@inproceedings{10.1145/2659651.2659738,
author = {Gandotra, Ekta and Bansal, Divya and Sofat, Sanjeev},
title = {Integrated Framework for Classification of Malwares},
year = {2014},
isbn = {9781450330336},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2659651.2659738},
doi = {10.1145/2659651.2659738},
abstract = {Malware is one of the most terrible and major security threats facing the Internet today. It is evolving, becoming more sophisticated and using new ways to target computers and mobile devices. The traditional defences like antivirus softwares typically rely on signature based methods and are unable to detect previously unseen malwares. Machine learning approaches have been adopted to classify malwares based on the features extracted using static or dynamic analysis. Both type of malware analysis have their pros and cons. In this paper, we propose a classification framework which uses integration of both static and dynamic features for distinguishing malwares from clean files. A real world corpus of recent malwares is used to validate the proposed approach. The experimental results, based on a dataset of 998 malwares and 428 cleanware files provide an accuracy of 99.58% indicating that the hybrid approach enhances the accuracy rate of malware detection and classification over the results obtained when these features are considered separately.},
booktitle = {Proceedings of the 7th International Conference on Security of Information and Networks},
pages = {417–422},
numpages = {6},
keywords = {Machine Learning, Static Analysis, Classification, Dynamic Analysis, Malware},
location = {Glasgow, Scotland, UK},
series = {SIN '14}
}


@inproceedings{10.1145/3368756.3369091,
author = {Ilham, Soussi and Abderrahim, Ghadi and Abdelhakim, Boudhir Anouar},
title = {Deep Learning for Detecting Android Malwares},
year = {2019},
isbn = {9781450362894},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368756.3369091},
doi = {10.1145/3368756.3369091},
abstract = {The revolution and development of malwares over time necessitate an intensive researches on advanced techniques to secure user's personal and critical information, the most challenging task is to build a strong and robust classifier allows to detect different types of malwares and being able to defeat zero-day malware attacks. Machine learning algorithms as SVM (support vector machine), Random Forest and Na\"{\i}ve Bayes are well-known choices for building the malware classifier, even though the deep learning which is a subfield of machine learning, has a portion in classifying android malwares with high precision. In this paper we present a modest study on difference between using both techniques and proposition of an approach based on deep learning technique applied on Apk of android applications belong to a heterogeneous data combined of benign and malware applications of different types.},
booktitle = {Proceedings of the 4th International Conference on Smart City Applications},
articleno = {104},
numpages = {4},
keywords = {convolutional neural network, API calls, static analysis, Android malware, classification, deep learning, machine learning},
location = {Casablanca, Morocco},
series = {SCA '19}
}


@inproceedings{10.1145/3386723.3387839,
author = {Ikram, Ben Abdel Ouahab and Lotfi, El Aachak and Abdelhakim, Boudhir Anouar and Mohammed, Bouhorma},
title = {Speedy and Efficient Malwares Images Classifier Using Reduced GIST Features for a New Defense Guide},
year = {2020},
isbn = {9781450376341},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3386723.3387839},
doi = {10.1145/3386723.3387839},
abstract = {Malwares attacks are becoming increasingly destructive. Hackers target all types of devices from big to the most little ones. Researcher's communities in cybersecurity field are working hard to defend malwares attacks as well as any other malicious activity. In fact, the primary goal is to defend cyberattacks as fast as possible to avoid catastrophic damages. In this paper, we proposed new cybersecurity architecture specialized in malwares attacks defense. This proposal puts together four layers based on malwares behaviors. In addition, we perform malware classifier using malware visualization technique, GIST descriptor features and K-Nearest Neighbor algorithm. The classifier is able to put each input malware image into its corresponding family. Families distribution is been divided by malwares behaviors. For the purpose of attaining speedy malwares classifier, we use Univariate Feature Selection technique to reduce GIST feature. So we succeeded in getting from 320 to only 50 features in less timing with very close accuracy of 97,67%.},
booktitle = {Proceedings of the 3rd International Conference on Networking, Information Systems &amp; Security},
articleno = {20},
numpages = {6},
keywords = {malware visualization and Features selection, Machine learning, Cybersecurity, malware classification, k-nearest neighbor},
location = {Marrakech, Morocco},
series = {NISS2020}
}


@inproceedings{10.1145/3057109.3057112,
author = {Luo, Xi and Wang, Liming and Xu, Zhen and Yang, Jing and Sun, Mo and Wang, Jing},
title = {DGASensor: Fast Detection for DGA-Based Malwares},
year = {2017},
isbn = {9781450348614},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3057109.3057112},
doi = {10.1145/3057109.3057112},
abstract = {DNS protocol has been used by many malwares for command-and-control (C&amp;C). To improve the resiliency of C&amp;C communication, Domain Generation Algorithm (DGA) has been utilized by recent malwares such as Locky, Conficker and Zeus. Many detection systems have been introduced for DGA-based botnets detection. However, such botnets detection approaches suffer from several limitations, for instance, requiring a group of DGA domains, period behaviors, the presence of multiple bots, and so forth. It is very hard for them to detect an individually running DGA-based malware which leave only a few traces. In this paper, we develop DGASensor to detect DGA-based malwares immediately by identifying a single DGA domain using lexical evidence. First, DGASensor automatically analyzes the lexical patterns of the most popular domains listed in Alexa top 100,000, and then extracts two templates, namely distribution template and structure template. Second, the above two templates, pronounceable attributes, and some frequently used properties like entropy and length, are used to extract features from a single domain. Third, we train our classifier using a non-DGA dataset consisting of domains obtained from Alexa rank and a DGA dataset generated by known DGAs. At last, we provide a short word filter to decrease the false positive rate. We implement a prototype system and evaluate it using the above training dataset with 10-fold cross validation. Moreover, a set of real world DNS traffic collected from a recursive DNS server is used to measure real world performance of our system. The results show that DGASensor detects DGA domains with accuracy 93% in our training dataset and is able to identify a variety of malwares in the real world dataset with an extremely high processing capability.},
booktitle = {Proceedings of the 5th International Conference on Communications and Broadband Networking},
pages = {47–53},
numpages = {7},
keywords = {DGA-based malwares, DNS, command-and-control, individually running, lexical evidence, single DGA domain},
location = {Bali, Indonesia},
series = {ICCBN '17}
}


@inproceedings{10.1145/3154273.3154326,
author = {Sethi, Kamalakanta and Chaudhary, Shankar Kumar and Tripathy, Bata Krishan and Bera, Padmalochan},
title = {A Novel Malware Analysis Framework for Malware Detection and Classification Using Machine Learning Approach},
year = {2018},
isbn = {9781450363723},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3154273.3154326},
doi = {10.1145/3154273.3154326},
abstract = {Nowadays, the digitization of the world is under a serious threat due to the emergence of various new and complex malware every day. Due to this, the traditional signature-based methods for detection of malware effectively become an obsolete method. The efficiency of the machine learning techniques in context to the detection of malwares has been proved by state-of-the-art research works. In this paper, we have proposed a framework to detect and classify different files (e.g., exe, pdf, php, etc.) as benign and malicious using two level classifier namely, Macro (for detection of malware) and Micro (for classification of malware files as a Trojan, Spyware, Ad-ware, etc.). Our solution uses Cuckoo Sandbox for generating static and dynamic analysis report by executing the sample files in the virtual environment. In addition, a novel feature extraction module has been developed which functions based on static, behavioral and network analysis using the reports generated by the Cuckoo Sandbox. Weka Framework is used to develop machine learning models by using training datasets. The experimental results using the proposed framework shows high detection rate and high classification rate using different machine learning algorithms},
booktitle = {Proceedings of the 19th International Conference on Distributed Computing and Networking},
articleno = {49},
numpages = {4},
keywords = {SMO, Malware Detection, Malware Classification, Cuckoo Sandbox, Static and Dynamic Analysis},
location = {Varanasi, India},
series = {ICDCN '18}
}


@inproceedings{10.1145/3338840.3355693,
author = {Lee, Yena and Kim, Yongmin and Lee, Seungyeon and Heo, Junyoung and Hong, Jiman},
title = {Machine Learning Based Android Malware Classification},
year = {2019},
isbn = {9781450368438},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3338840.3355693},
doi = {10.1145/3338840.3355693},
abstract = {As growing Android smart-phones, malware threatens smart-phones is also increasing. There are many types of Android malwares. To detect these Android malwares effectively, first, we need to classify Android malwares. In this paper, we build a database storing Android malwares and their types and characteristics. With the database, we propose a machine learning model to classify the malwares. To evaluate the model, we conducted k-fold cross validation. Through the evaluation, our model showed over 85% accuracy in the malware classification.},
booktitle = {Proceedings of the Conference on Research in Adaptive and Convergent Systems},
pages = {300–302},
numpages = {3},
keywords = {malware database, malware classification, machine learning, Android mawlare},
location = {Chongqing, China},
series = {RACS '19}
}


@inproceedings{10.1145/3206129.3239430,
author = {Lee, Yoon-seon and Lee, Jae-ung and Soh, Woo-young},
title = {Trend of Malware Detection Using Deep Learning},
year = {2018},
isbn = {9781450365253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3206129.3239430},
doi = {10.1145/3206129.3239430},
abstract = {According to recent security trends, there are more variations of existing malware than new type malware. These malwares are causing a lot of damage, such as encrypting users ' data to leak personal information, delete data, and make financial demands. Although many studies are being conducted to analyze malwares in order to respond to the rapidly increasing malware with such malicious purpose, current malware analysis methods are for obfuscation, virtual environment bypass, etc. To overcome these difficulties, Deep Learning method that analyzes and utilizes harmful codes is receiving spotlight recently. Therefore, this thesis introduces trends on how to analyze malware based on Deep Learning.},
booktitle = {Proceedings of the 2nd International Conference on Education and Multimedia Technology},
pages = {102–106},
numpages = {5},
keywords = {Deep Learning, Malware Detection, Malware},
location = {Okinawa, Japan},
series = {ICEMT 2018}
}


@inproceedings{10.1145/2905055.2905361,
author = {Kunwar, Rakesh Singh and Sharma, Priyanka},
title = {Malware Analysis: Tools and Techniques},
year = {2016},
isbn = {9781450339629},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2905055.2905361},
doi = {10.1145/2905055.2905361},
abstract = {Malicious code is a serious issue which regularly threatens the security of computer systems and act as a challenging task for cyber security&amp; Information security personals. Malicious code is named differently according to their specification such as virus, worm, Trojan, Rootkit, spam etc. Risk factor due to malwares increases exponentially with the advancement in technology. Malware analysis is divided into code (static) analysis, behavioral (dynamic) analysis. It depends upon the investigator to use the different tools and techniques for analysis. Static analysis is first line of defense against malware which is composed of malware detector and scanners. With the advancement in technology, Malware developer uses different kind of techniques to maintain its source code hide from these detectors or scanner to find out hash value, finding strings, pattern matching etc. to identify the malware. Whereas, malware analyst decompress the packed file into unpacked file &amp; investigate obfuscated malwares. In this paper, we try to investigate the different tool and techniques used in malware over practical working malwares.},
booktitle = {Proceedings of the Second International Conference on Information and Communication Technology for Competitive Strategies},
articleno = {144},
numpages = {4},
keywords = {Dynamic Malware analysis, Threats, Static Malware analysis, Security, Sandbox},
location = {Udaipur, India},
series = {ICTCS '16}
}


@inproceedings{10.1145/3409073.3409084,
author = {Congyi, Deng and Guangshun, Shi},
title = {Method for Detecting Android Malware Based on Ensemble Learning},
year = {2020},
isbn = {9781450377645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3409073.3409084},
doi = {10.1145/3409073.3409084},
abstract = {In recent years, we have become increasingly dependent on smart devices. Android is an operating system mainly used on mobile devices, where hundreds of millions of users can download various apps through many application stores. Under these circumstances, a large number of malicious apps can be put into the application stores by developers to achieve the purpose of attacking, controlling user devices, and even stealing user information and property. Therefore, it is necessary to identify malwares in mass apps through analysis and detection to remind users. We propose an idea of detecting and discriminating Android malware based on an ensemble learning method. Firstly, a static analysis of AndroidManifest file in APK is performed to extract features such as permission calls, component calls, and intents in system. Then we use XGBoost method, an implementation of ensemble learning, to detect malicious applications. The conclusion is that this system performs very well in Android malware detection.},
booktitle = {Proceedings of the 2020 5th International Conference on Machine Learning Technologies},
pages = {28–31},
numpages = {4},
keywords = {Android Malware, Ensemble Learning, Malware Detection, Static Analysis},
location = {Beijing, China},
series = {ICMLT 2020}
}


@inproceedings{10.1145/2523514.2527006,
author = {Alam, Shahid and Horspool, R. Nigel and Traore, Issa},
title = {MAIL: Malware Analysis Intermediate Language: A Step towards Automating and Optimizing Malware Detection},
year = {2013},
isbn = {9781450324984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2523514.2527006},
doi = {10.1145/2523514.2527006},
abstract = {Dynamic binary obfuscation or metamorphism is a technique where a malware never keeps the same sequence of opcodes in the memory. Such malware are very difficult to analyse and detect manually even with the help of tools. We need to automate the analysis and detection process of such malware. This paper introduces and presents a new language named MAIL (Malware Analysis Intermediate Language) to automate and optimize this process. MAIL also provides portability for building malware analysis and detection tools. Each MAIL statement is assigned a pattern that can be used to annotate a control flow graph for pattern matching to analyse and detect metamorphic malware. Experimental evaluation of the proposed approach using an existing dataset yields malware detection rate of 93.92% and false positive rate of 3.02%.},
booktitle = {Proceedings of the 6th International Conference on Security of Information and Networks},
pages = {233–240},
numpages = {8},
keywords = {malware detection, static binary analysis, control flow graph, malware analysis, intermediate languages},
location = {Aksaray, Turkey},
series = {SIN '13}
}


@inbook{10.1145/3340531.3417467,
author = {Kim, Eujeanne and Park, Sung-Jun and Chae, Dong-Kyu and Choi, Seokwoo and Kim, Sang-Wook},
title = {A Human-in-the-Loop Approach to Malware Author Classification},
year = {2020},
isbn = {9781450368599},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3340531.3417467},
abstract = {For these few decades malwares have been posing a major concern in the cyber security. Recently, a number of "author groups" have been generating lots of newmalwares by sharing source code within a group and exploiting evasive schemes such as polymorphism and metamorphism. This motivates us to study the problem of identifying the author group of a given malware, which would be able to work for not only blocking malwares but also legally punishing suspected malware authors. In this paper, we propose a human-machine collaborative approach for classifying author groups of malwares accurately. We also propose a visualization method for helping human experts to make the decision easily. We verify the superiority of our framework through extensive experiments using real-world malware data.},
booktitle = {Proceedings of the 29th ACM International Conference on Information &amp; Knowledge Management},
pages = {3289–3292},
numpages = {4}
}


@inproceedings{10.1145/3129676.3129712,
author = {Kwon, Iltaek and Im, Eul Gyu},
title = {Extracting the Representative API Call Patterns of Malware Families Using Recurrent Neural Network},
year = {2017},
isbn = {9781450350273},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3129676.3129712},
doi = {10.1145/3129676.3129712},
abstract = {With thousands of malware samples pouring out every day, how can we reduce malware analysis time and detect them effectively? Malware family classification provides one of good measures to predict characteristics of unknown malware since malware belonging to the same family can have similar features. Static analysis and dynamic analysis are techniques to obtain features to be used for classifying malware samples to their families. Static analysis performs analysis based on specific signatures included in the malware. Static analysis has the advantages that the scope of the analysis covers the entire code, and the analysis can be performed without executing the malware. However, it is very difficult to detect or classify malware variants with only the results of the static analysis, because malware developers use polymorphic or encryption techniques to avoid static analysis-based detection of anti-virus software. Dynamic analysis analyzes malware behaviors, so the results of dynamic analysis can be used to detect or classify malware variants. One of dynamic features that can be used to detect or classify malware variants is API call sequences. In this paper, we propose a novel method to extract representative API call patterns of malware families using Recurrent Neural Network (RNN). We conducted experiments with 787 malware samples belonging to 9 families. In our experiments, we extracted representative API call patterns of 9 malware families on 551 samples as a training set and performed classification on the 236 samples as a test set. Classification accuracy results using API call patterns extracted from RNN were measured as 71% on average. The results show the feasibility of our approach using RNN to extract representative API call pattern of malware families for malware family classification.},
booktitle = {Proceedings of the International Conference on Research in Adaptive and Convergent Systems},
pages = {202–207},
numpages = {6},
keywords = {Malware Classification, Representative API Call Pattern, Recurrent Neural Network},
location = {Krakow, Poland},
series = {RACS '17}
}


@inproceedings{10.1145/3318236.3318255,
author = {Sun, Zhi and Rao, Zhihong and Chen, Jianfeng and Xu, Rui and He, Da and Yang, Hui and Liu, Jie},
title = {An Opcode Sequences Analysis Method For Unknown Malware Detection},
year = {2019},
isbn = {9781450362450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3318236.3318255},
doi = {10.1145/3318236.3318255},
abstract = {One of the main challenges in security today is defending against unknown malware attacks which have the potential to harm a computer or network. Hence, detecting malware has become one of the most important challenges for the security of computer systems. The known malware detection methods based on the appearance of opcode sequences has to construct a matrix from programs of different architectures to extract high-level features. In order to resolve high dimensional inputs vector and differences assembly instruction, this paper proposes a novel method for detecting static characteristics of 32-bit and 64-bit malicious Portable Executable (PE) Windows files by opcode sequences analysis. By compute the frequency of occurrence of each opcode sequence and distinguishing different types of 32-bit and 64-bit PE files, the proposed method shows promising results with less complexity in comparison with previous studies, which is beneficial to train machine learning model such as k-nearest neighbor (KNN) and back-propagation neural network (BP). Our method is evaluated on more than 20,000 samples, and experimental results show that our system can effectively detect and classify unknown malware.},
booktitle = {Proceedings of the 2019 2nd International Conference on Geoinformatics and Data Analysis},
pages = {15–19},
numpages = {5},
keywords = {classification, machine learning, Malware detection, computer security},
location = {Prague, Czech Republic},
series = {ICGDA 2019}
}


@inproceedings{10.1145/3387168.3387218,
author = {Ahmad, Azuan and Shafiuddin, Wan and Kama, Mohd Nazri and Saudi, Madihah Mohd},
title = {A New Cryptojacking Malware Classifier Model Based on Dendritic Cell Algorithm},
year = {2019},
isbn = {9781450376259},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3387168.3387218},
doi = {10.1145/3387168.3387218},
abstract = {A new threat known as "cryptojacking" has entered the picture where cryptojacking malware is the future trend for cyber criminals, who infect victim's device, install cryptojacking malware, and use the stolen resources for crytocurrency mining. Worse comes to worst by 2020, researchers estimate there will be 30 billion of IoT devices in the world. IoT devices are vulnerable to attacks because of their simple configuration, unpatched vulnerability and weak passwords. IoT devices also prone to be poorly monitored because of their nature. There is lack of studies that provide in depth analysis on cryptojacking malware classification using machine learning approach where the current research mostly focused on manual analysis of web-based cryptojacking attacks. As IoT devices requires small processing capability, a lightweight model are required for the cryptojacking malware detection algorithm to maintain its accuracy without sacrificing the performance of other process. As a solution, we propose a new lightweight cryptojacking classifier model based on machine learning technique that may fit in a low processing capability environment such as IoT and Cyber Physical Systems (CPS). This paper aim to disscuss a new approach based on dendritic cell algorithm in order to provide a lightweight cryptojacking classifier model. The output of this paper will be significant used in detecting cryptojacking malware attacks that benefits multiple industries including cyber security contractors, oil and gas, water, power and energy industries.},
booktitle = {Proceedings of the 3rd International Conference on Vision, Image and Signal Processing},
articleno = {84},
numpages = {5},
keywords = {Cryptojacking, Malware, Cyber Security, Artificial Intelligence, Dendritic Cell Algorithm},
location = {Vancouver, BC, Canada},
series = {ICVISP 2019}
}


@article{10.1145/3329786,
author = {Or-Meir, Ori and Nissim, Nir and Elovici, Yuval and Rokach, Lior},
title = {Dynamic Malware Analysis in the Modern Era—A State of the Art Survey},
year = {2019},
issue_date = {October 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {5},
issn = {0360-0300},
url = {https://doi.org/10.1145/3329786},
doi = {10.1145/3329786},
abstract = {Although malicious software (malware) has been around since the early days of computers, the sophistication and innovation of malware has increased over the years. In particular, the latest crop of ransomware has drawn attention to the dangers of malicious software, which can cause harm to private users as well as corporations, public services (hospitals and transportation systems), governments, and security institutions. To protect these institutions and the public from malware attacks, malicious activity must be detected as early as possible, preferably before it conducts its harmful acts. However, it is not always easy to know what to look for—especially when dealing with new and unknown malware that has never been seen. Analyzing a suspicious file by static or dynamic analysis methods can provide relevant and valuable information regarding a file's impact on the hosting system and help determine whether the file is malicious or not, based on the method's predefined rules. While various techniques (e.g., code obfuscation, dynamic code loading, encryption, and packing) can be used by malware writers to evade static analysis (including signature-based anti-virus tools), dynamic analysis is robust to these techniques and can provide greater understanding regarding the analyzed file and consequently can lead to better detection capabilities. Although dynamic analysis is more robust than static analysis, existing dynamic analysis tools and techniques are imperfect, and there is no single tool that can cover all aspects of malware behavior. The most recent comprehensive survey performed in this area was published in 2012. Since that time, the computing environment has changed dramatically with new types of malware (ransomware, cryptominers), new analysis methods (volatile memory forensics, side-channel analysis), new computing environments (cloud computing, IoT devices), new machine-learning algorithms, and more. The goal of this survey is to provide a comprehensive and up-to-date overview of existing methods used to dynamically analyze malware, which includes a description of each method, its strengths and weaknesses, and its resilience against malware evasion techniques. In addition, we include an overview of prominent studies presenting the usage of machine-learning methods to enhance dynamic malware analysis capabilities aimed at detection, classification, and categorization.},
journal = {ACM Comput. Surv.},
month = sep,
articleno = {88},
numpages = {48},
keywords = {evasion, detection, behavioral analysis, Dynamic analysis, malware}
}


@inproceedings{10.1145/2016904.2016908,
author = {Nataraj, L. and Karthikeyan, S. and Jacob, G. and Manjunath, B. S.},
title = {Malware Images: Visualization and Automatic Classification},
year = {2011},
isbn = {9781450306799},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2016904.2016908},
doi = {10.1145/2016904.2016908},
abstract = {We propose a simple yet effective method for visualizing and classifying malware using image processing techniques. Malware binaries are visualized as gray-scale images, with the observation that for many malware families, the images belonging to the same family appear very similar in layout and texture. Motivated by this visual similarity, a classification method using standard image features is proposed. Neither disassembly nor code execution is required for classification. Preliminary experimental results are quite promising with 98% classification accuracy on a malware database of 9,458 samples with 25 different malware families. Our technique also exhibits interesting resilience to popular obfuscation techniques such as section encryption.},
booktitle = {Proceedings of the 8th International Symposium on Visualization for Cyber Security},
articleno = {4},
numpages = {7},
keywords = {malware visualization, image processing, malware, computer security, image texture, malware classification, visualization},
location = {Pittsburgh, Pennsylvania, USA},
series = {VizSec '11}
}


@inproceedings{10.1145/1966913.1966940,
author = {Rhee, Junghwan and Lin, Zhiqiang and Xu, Dongyan},
title = {Characterizing Kernel Malware Behavior with Kernel Data Access Patterns},
year = {2011},
isbn = {9781450305648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1966913.1966940},
doi = {10.1145/1966913.1966940},
abstract = {Characterizing malware behavior using its control flow faces several challenges, such as obfuscations in static analysis and the behavior variations in dynamic analysis. This paper introduces a new approach to characterizing kernel malware's behavior by using kernel data access patterns unique to the malware. The approach neither uses malware's control flow consisting of temporal ordering of malware code execution, nor the code-specific information about the malware. Thus, the malware signature based on such data access patterns is resilient in matching malware variants.To evaluate the effectiveness of this approach, we first generated the signatures of three classic rootkits using their data access patterns, and then matched them with a group of kernel execution instances which are benign or compromised by 16 kernel rootkits. The malware signatures did not trigger any false positives in benign kernel runs; however, kernel runs compromised by 16 rootkits were detected due to the data access patterns shared with the compared signature(s). We further observed similar data access patterns in the signatures of the tested rootkits and exposed popular rootkit attack operations by ranking common data behavior across rootkits. Our experiments show that our approach is effective not only to detect the malware whose signature is available, but also to determine its variants which share kernel data access patterns.},
booktitle = {Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security},
pages = {207–216},
numpages = {10},
keywords = {kernel data access patterns, kernel malware signature, kernel malware analysis},
location = {Hong Kong, China},
series = {ASIACCS '11}
}


@inproceedings{10.1145/2330784.2331029,
author = {Kim, Jinhyun and Moon, Byung-Ro},
title = {New Malware Detection System Using Metric-Based Method and Hybrid Genetic Algorithm},
year = {2012},
isbn = {9781450311786},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2330784.2331029},
doi = {10.1145/2330784.2331029},
abstract = {Malicious software, or malware for short, is one of the most serious threats to computer systems. Malware disguise techniques are becoming more sophisticated, and signature-based malware detection systems can not cope with disguised malware timely. In this paper, we propose a new approach to detect disguised malware, focusing on the malware scripts. The proposed system consists of a metric-based detection algorithm and a hybrid genetic algorithm. The genetic algorithm tries further detection by extracting the main core of a program. Experimental tests on the proposed system show a remarkable performance improvement over existing anti-virus programs.},
booktitle = {Proceedings of the 14th Annual Conference Companion on Genetic and Evolutionary Computation},
pages = {1527–1528},
numpages = {2},
keywords = {malware disguise techniques, metric-based method, malware detection, hybrid genetic algorithm},
location = {Philadelphia, Pennsylvania, USA},
series = {GECCO '12}
}


@inproceedings{10.1145/3133956.3134099,
author = {Korczynski, David and Yin, Heng},
title = {Capturing Malware Propagations with Code Injections and Code-Reuse Attacks},
year = {2017},
isbn = {9781450349468},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3133956.3134099},
doi = {10.1145/3133956.3134099},
abstract = {Defending against malware involves analysing large amounts of suspicious samples. To deal with such quantities we rely heavily on automatic approaches to determine whether a sample is malicious or not. Unfortunately, complete and precise automatic analysis of malware is far from an easy task. This is because malware is often designed to contain several techniques and countermeasures specifically to hinder analysis. One of these techniques is for the malware to propagate through the operating system so as to execute in the context of benign processes. The malware does this by writing memory to a given process and then proceeds to have this memory execute. In some cases these propagations are trivial to capture because they rely on well-known techniques. However, in the cases where malware deploys novel code injection techniques, rely on code-reuse attacks and potentially deploy dynamically generated code, the problem of capturing a complete and precise view of the malware execution is non-trivial.In this paper we present a unified approach to tracing malware propagations inside the host in the context of code injections and code-reuse attacks. We also present, to the knowledge of the authors, the first approach to identifying dynamically generated code based on information-flow analysis. We implement our techniques in a system called Tartarus and match Tartarus with both synthetic applications and real-world malware. We compare Tartarus to previous works and show that our techniques substantially improve the precision for collecting malware execution traces, and that our approach can capture intrinsic characteristics of novel code injection techniques.},
booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
pages = {1691–1708},
numpages = {18},
keywords = {taint analysis, code injection, security, malware},
location = {Dallas, Texas, USA},
series = {CCS '17}
}


@inproceedings{10.1145/3372297.3417291,
author = {Zhang, Xiaohan and Zhang, Yuan and Zhong, Ming and Ding, Daizong and Cao, Yinzhi and Zhang, Yukun and Zhang, Mi and Yang, Min},
title = {Enhancing State-of-the-Art Classifiers with API Semantics to Detect Evolved Android Malware},
year = {2020},
isbn = {9781450370899},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3372297.3417291},
doi = {10.1145/3372297.3417291},
abstract = {Machine learning (ML) classifiers have been widely deployed to detect Android malware, but at the same time the application of ML classifiers also faces an emerging problem. The performance of such classifiers degrades---or called ages---significantly over time given the malware evolution. Prior works have proposed to use retraining or active learning to reverse and improve aged models. However, the underlying classifier itself is still blind, unaware of malware evolution. Unsurprisingly, such evolution-insensitive retraining or active learning comes at a price, i.e., the labeling of tens of thousands of malware samples and the cost of significant human efforts. In this paper, we propose the first framework, called APIGraph, to enhance state-of-the-art malware classifiers with the similarity information among evolved Android malware in terms of semantically-equivalent or similar API usages, thus naturally slowing down classifier aging. Our evaluation shows that because of the slow-down of classifier aging, APIGraph saves significant amounts of human efforts required by active learning in labeling new malware samples.},
booktitle = {Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security},
pages = {757–770},
numpages = {14},
keywords = {model aging, api semantics, evolved malware detection},
location = {Virtual Event, USA},
series = {CCS '20}
}


@article{10.1145/3365001,
author = {Afianian, Amir and Niksefat, Salman and Sadeghiyan, Babak and Baptiste, David},
title = {Malware Dynamic Analysis Evasion Techniques: A Survey},
year = {2019},
issue_date = {January 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {6},
issn = {0360-0300},
url = {https://doi.org/10.1145/3365001},
doi = {10.1145/3365001},
abstract = {The cyber world is plagued with ever-evolving malware that readily infiltrate all defense mechanisms, operate viciously unbeknownst to the user, and surreptitiously exfiltrate sensitive data. Understanding the inner workings of such malware provides a leverage to effectively combat them. This understanding is pursued often through dynamic analysis which is conducted manually or automatically. Malware authors accordingly, have devised and advanced evasion techniques to thwart or evade these analyses. In this article, we present a comprehensive survey on malware dynamic analysis evasion techniques. In addition, we propose a detailed classification of these techniques and further demonstrate how their efficacy holds against different types of detection and analysis approaches.Our observations attest that evasive behavior is mostly concerned with detecting and evading sandboxes. The primary tactic of such malware we argue is fingerprinting followed by new trends for reverse Turing test tactic which aims at detecting human interaction. Furthermore, we will posit that the current defensive strategies, beginning with reactive methods to endeavors for more transparent analysis systems, are readily foiled by zero-day fingerprinting techniques or other evasion tactics such as stalling. Accordingly, we would recommend the pursuit of more generic defensive strategies with an emphasis on path exploration techniques that has the potential to thwart all the evasive tactics.},
journal = {ACM Comput. Surv.},
month = nov,
articleno = {126},
numpages = {28},
keywords = {sandbox evasion, Malware, evasion techniques, anti-debugging}
}


@inproceedings{10.1145/3318216.3363379,
author = {Choi, Jinchun and Anwar, Afsah and Alasmary, Hisham and Spaulding, Jeffrey and Nyang, DaeHun and Mohaisen, Aziz},
title = {IoT Malware Ecosystem in the Wild: A Glimpse into Analysis and Exposures},
year = {2019},
isbn = {9781450367332},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3318216.3363379},
doi = {10.1145/3318216.3363379},
abstract = {The lack of security measures among the Internet of Things (IoT) devices and their persistent online connection give adversaries a prime opportunity to target them or even abuse them as intermediary targets in larger attacks such as distributed denial-of-service (DDoS) campaigns. In this paper, we analyze IoT malware and focus on the endpoints reachable on the public Internet, and play an essential part in the IoT malware ecosystem. Namely, we analyze endpoints acting as dropzones and their targets to gain insights into the underlying dynamics in this ecosystem, such as the affinity between the dropzones and their target IP addresses, and the different patterns among endpoints. Towards this goal, we reverse-engineer 2,423 IoT malware samples and extract strings from them to obtain IP addresses. We further gather information about these endpoints from public Internet-wide scanners, such as Shodan and Censys. For the masked IP addresses, we examine the Classless Inter-Domain Routing (CIDR) networks accumulating to more than 100 million (≈78.2% of total active public IPv4 addresses) endpoints.},
booktitle = {Proceedings of the 4th ACM/IEEE Symposium on Edge Computing},
pages = {413–418},
numpages = {6},
keywords = {internet of things, endpoints, malware},
location = {Arlington, Virginia},
series = {SEC '19}
}


@article{10.1145/3377869,
author = {Burton, Ren\'{e}e},
title = {Unsupervised Learning Techniques for Malware Characterization: Understanding Certain DNS-Based DDoS Attacks},
year = {2020},
issue_date = {September 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {3},
issn = {2692-1626},
url = {https://doi.org/10.1145/3377869},
doi = {10.1145/3377869},
abstract = {This article details data science research in the area of Cyber Threat Intelligence applied to a specific type of Distributed Denial of Service (DDoS) attack. We study a DDoS technique prevalent in the Domain Name System (DNS) for which little malware have been recovered. Using data from a globally distributed set of a passive collectors (pDNS), we create a statistical classifier to identify these attacks and then use unsupervised learning to investigate the attack events and the malware that generates them. The first known major study of this technique, this work demonstrates that current attacks have little resemblance to earlier published descriptions and identifies several features of the attacks. Through a combination of text and time-series features, we are able to characterize the dominant malware and demonstrate that the number of global-scale attack systems is relatively small.},
journal = {Digital Threats: Research and Practice},
month = aug,
articleno = {14},
numpages = {26},
keywords = {malware, botnet, threat intelligence, data science, clustering, ddos attacks, Domain name service (DNS)}
}


@inproceedings{10.1145/1774088.1774303,
author = {Sami, Ashkan and Yadegari, Babak and Rahimi, Hossein and Peiravian, Naser and Hashemi, Sattar and Hamze, Ali},
title = {Malware Detection Based on Mining API Calls},
year = {2010},
isbn = {9781605586397},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1774088.1774303},
doi = {10.1145/1774088.1774303},
abstract = {Financial loss due to malware nearly doubles every two years. For instance in 2006, malware caused near 33.5 Million GBP direct financial losses only to member organizations of banks in UK. Recent malware cannot be detected by traditional signature based anti-malware tools due to their polymorphic and/or metamorphic nature. Malware detection based on its immutable characteristics has been a recent industrial practice. The datasets are not public. Thus the results are not reproducible and conducting research in academic setting is difficult. In this work, we not only have improved a recent method of malware detection based on mining Application Programming Interface (API) calls significantly, but also have created the first public dataset to promote malware research.Our technique first reads API call sets used in a collection of Portable Executable (PE) files, then generates a set of discriminative and domain interpretable features. These features are then used to train a classifier to detect unseen malware. We have achieved detection rate of 99.7% while keeping accuracy as high as 98.3%. Our method improved state of the art technology in several aspects: accuracy by 5.24%, detection rate by 2.51% and false alarm rate was decreased from 19.86% to 1.51%. This project's data and source code can be found at http://home.shirazu.ac.ir/~sami/malware.},
booktitle = {Proceedings of the 2010 ACM Symposium on Applied Computing},
pages = {1020–1025},
numpages = {6},
keywords = {public dataset, frequent pattern mining, portable executable (PE), polymorphic/metamorphic malware, malware detection, API call},
location = {Sierre, Switzerland},
series = {SAC '10}
}



@inproceedings{10.1145/2875475.2875481,
author = {Canfora, Gerardo and Medvet, Eric and Mercaldo, Francesco and Visaggio, Corrado Aaron},
title = {Acquiring and Analyzing App Metrics for Effective Mobile Malware Detection},
year = {2016},
isbn = {9781450340779},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2875475.2875481},
doi = {10.1145/2875475.2875481},
abstract = {Android malware is becoming very effective in evading detection techniques, and traditional malware detection techniques are demonstrating their weaknesses. Signature based detection shows at least two drawbacks: first, the detection is possible only after the malware has been identified, and the time needed to produce and distribute the signature provides attackers with window of opportunities for spreading the malware in the wild. For solving this problem, different approaches that try to characterize the malicious behavior through the invoked system and API calls emerged. Unfortunately, several evasion techniques have proven effective to evade detection based on system and API calls.In this paper, we propose an approach for capturing the malicious behavior in terms of device resource consumption (using a thorough set of features), which is much more difficult to camouflage. We describe a procedure, and the corresponding practical setting, for extracting those features with the aim of maximizing their discriminative power. Finally, we describe the promising results we obtained experimenting on more than 2000 applications, on which our approach exhibited an accuracy greater than 99%.},
booktitle = {Proceedings of the 2016 ACM on International Workshop on Security And Privacy Analytics},
pages = {50–57},
numpages = {8},
keywords = {malware android machine learning},
location = {New Orleans, Louisiana, USA},
series = {IWSPA '16}
}


@inproceedings{10.1145/3241539.3267768,
author = {Arora, Anshul and Peddoju, Sateesh K. and Chouhan, Vikas and Chaudhary, Ajay},
title = {Hybrid Android Malware Detection by Combining Supervised and Unsupervised Learning},
year = {2018},
isbn = {9781450359030},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3241539.3267768},
doi = {10.1145/3241539.3267768},
abstract = {Permissions and the network traffic features are the widely used attributes in static and dynamic Android malware detection respectively. However, static permissions cannot detect stealthy malware with update attacks capability, while dynamic network traffic cannot detect the malware samples without network connectivity. Hence, there is a need to build a hybrid model combining both these attributes. In this work, we propose a hybrid malware detector that examines both the permissions and the traffic features to detect malicious Android samples. The proposed approach is based on the combination of Supervised Learning (KNN Algorithm) and Unsupervised Learning (K-Medoids Algorithm). Experimental results demonstrate that hybrid approach gives the overall detection accuracy of 91.98%, better than static and dynamic detection accuracies of 71.46% and 81.13% respectively.},
booktitle = {Proceedings of the 24th Annual International Conference on Mobile Computing and Networking},
pages = {798–800},
numpages = {3},
keywords = {supervised learning, hybrid detection, android security, android malware, unsupervised learning},
location = {New Delhi, India},
series = {MobiCom '18}
}


@article{10.1145/3351881,
author = {Alaeiyan, Mohammadhadi and Dehghantanha, Ali and Dargahi, Tooska and Conti, Mauro and Parsa, Saeed},
title = {A Multilabel Fuzzy Relevance Clustering System for Malware Attack Attribution in the Edge Layer of Cyber-Physical Networks},
year = {2020},
issue_date = {May 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {3},
issn = {2378-962X},
url = {https://doi.org/10.1145/3351881},
doi = {10.1145/3351881},
abstract = {The rapid increase in the number of malicious programs has made malware forensics a daunting task and caused users’ systems to become in danger. Timely identification of malware characteristics including its origin and the malware sample family would significantly limit the potential damage of malware. This is a more profound risk in Cyber-Physical Systems (CPSs), where a malware attack may cause significant physical damage to the infrastructure. Due to limited on-device available memory and processing power in CPS devices, most of the efforts for protecting CPS networks are focused on the edge layer, where the majority of security mechanisms are deployed.Since the majority of advanced and sophisticated malware programs are combining features from different families, these malicious programs are not similar enough to any existing malware family and easily evade binary classifier detection. Therefore, in this article, we propose a novel multilabel fuzzy clustering system for malware attack attribution. Our system is deployed on the edge layer to provide insight into applicable malware threats to the CPS network. We leverage static analysis by utilizing Opcode frequencies as the feature space to classify malware families.We observed that a multilabel classifier does not classify a part of samples. We named this problem the instance coverage problem. To overcome this problem, we developed an ensemble-based multilabel fuzzy classification method to suggest the relevance of a malware instance to the stricken families. This classifier identified samples of VirusShare, RansomwareTracker, and BIG2015 with an accuracy of 94.66%, 94.26%, and 97.56%, respectively.},
journal = {ACM Trans. Cyber-Phys. Syst.},
month = mar,
articleno = {31},
numpages = {22},
keywords = {IoT, fuzzy classification, cyber-physical systems, instance coverage, CPS, malware classification, Edge layer, Internet of Things}
}



@inproceedings{10.1145/2664243.2664252,
author = {Lengyel, Tamas K. and Maresca, Steve and Payne, Bryan D. and Webster, George D. and Vogl, Sebastian and Kiayias, Aggelos},
title = {Scalability, Fidelity and Stealth in the DRAKVUF Dynamic Malware Analysis System},
year = {2014},
isbn = {9781450330053},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2664243.2664252},
doi = {10.1145/2664243.2664252},
abstract = {Malware is one of the biggest security threats on the Internet today and deploying effective defensive solutions requires the rapid analysis of a continuously increasing number of malware samples. With the proliferation of metamorphic malware the analysis is further complicated as the efficacy of signature-based static analysis systems is greatly reduced. While dynamic malware analysis is an effective alternative, the approach faces significant challenges as the ever increasing number of samples requiring analysis places a burden on hardware resources. At the same time modern malware can both detect the monitoring environment and hide in unmonitored corners of the system.In this paper we present DRAKVUF, a novel dynamic malware analysis system designed to address these challenges by building on the latest hardware virtualization extensions and the Xen hypervisor. We present a technique for improving stealth by initiating the execution of malware samples without leaving any trace in the analysis machine. We also present novel techniques to eliminate blind-spots created by kernel-mode rootkits by extending the scope of monitoring to include kernel internal functions, and to monitor file-system accesses through the kernel's heap allocations. With extensive tests performed on recent malware samples we show that DRAKVUF achieves significant improvements in conserving hardware resources while providing a stealthy, in-depth view into the behavior of modern malware.},
booktitle = {Proceedings of the 30th Annual Computer Security Applications Conference},
pages = {386–395},
numpages = {10},
keywords = {virtual machine introspection, dynamic malware analysis},
location = {New Orleans, Louisiana, USA},
series = {ACSAC '14}
}


@inproceedings{10.1145/3029806.3029823,
author = {McLaughlin, Niall and Martinez del Rincon, Jesus and Kang, BooJoong and Yerima, Suleiman and Miller, Paul and Sezer, Sakir and Safaei, Yeganeh and Trickel, Erik and Zhao, Ziming and Doup\'{e}, Adam and Joon Ahn, Gail},
title = {Deep Android Malware Detection},
year = {2017},
isbn = {9781450345231},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3029806.3029823},
doi = {10.1145/3029806.3029823},
abstract = {In this paper, we propose a novel android malware detection system that uses a deep convolutional neural network (CNN). Malware classification is performed based on static analysis of the raw opcode sequence from a disassembled program. Features indicative of malware are automatically learned by the network from the raw opcode sequence thus removing the need for hand-engineered malware features. The training pipeline of our proposed system is much simpler than existing n-gram based malware detection methods, as the network is trained end-to-end to jointly learn appropriate features and to perform classification, thus removing the need to explicitly enumerate millions of n-grams during training. The network design also allows the use of long n-gram like features, not computationally feasible with existing methods. Once trained, the network can be efficiently executed on a GPU, allowing a very large number of files to be scanned quickly.},
booktitle = {Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy},
pages = {301–308},
numpages = {8},
keywords = {malware detection, deep learning, android},
location = {Scottsdale, Arizona, USA},
series = {CODASPY '17}
}


@article{10.1145/1698750.1698752,
author = {Jiang, Xuxian and Wang, Xinyuan and Xu, Dongyan},
title = {Stealthy Malware Detection and Monitoring through VMM-Based “out-of-the-Box” Semantic View Reconstruction},
year = {2010},
issue_date = {February 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2},
issn = {1094-9224},
url = {https://doi.org/10.1145/1698750.1698752},
doi = {10.1145/1698750.1698752},
abstract = {An alarming trend in recent malware incidents is that they are armed with stealthy techniques to detect, evade, and subvert malware detection facilities of the victim. On the defensive side, a fundamental limitation of traditional host-based antimalware systems is that they run inside the very hosts they are protecting (“in-the-box”), making them vulnerable to counter detection and subversion by malware. To address this limitation, recent solutions based on virtual machine (VM) technologies advocate placing the malware detection facilities outside of the protected VM (“out-of-the-box”). However, they gain tamper resistance at the cost of losing the internal semantic view of the host, which is enjoyed by “in-the-box” approaches. This poses a technical challenge known as the semantic gap.In this article, we present the design, implementation, and evaluation of VMwatcher—an “out-of-the-box” approach that overcomes the semantic gap challenge. A new technique called guest view casting is developed to reconstruct internal semantic views (e.g., files, processes, and kernel modules) of a VM nonintrusively from the outside. More specifically, the new technique casts semantic definitions of guest OS data structures and functions on virtual machine monitor (VMM)-level VM states, so that the semantic view can be reconstructed. Furthermore, we extend guest view casting to reconstruct details of system call events (e.g., the process that makes the system call as well as the system call number, parameters, and return value) in the VM, enriching the semantic view. With the semantic gap effectively narrowed, we identify three unique malware detection and monitoring capabilities: (i) view comparison-based malware detection and its demonstration in rootkit detection; (ii) “out-of-the-box” deployment of off-the-shelf anti malware software with improved detection accuracy and tamper-resistance; and (iii) nonintrusive system call monitoring for malware and intrusion behavior observation. We have implemented a proof-of-concept VMwatcher prototype on a number of VMM platforms. Our evaluation experiments with real-world malware, including elusive kernel-level rootkits, demonstrate VMwatcher's practicality and effectiveness.},
journal = {ACM Trans. Inf. Syst. Secur.},
month = mar,
articleno = {12},
numpages = {28},
keywords = {Malware detection, rootkits, virtual machines}
}